
TEST 00
------------------------------
Writing to:  ./enctests/test00.mtf
Size of original file:  43
Size of compressed file:  38
Filesize has been reduced by 11.63%
Wrote profile results to mtfencode.py.lprof
Timer unit: 1e-06 s

Total time: 0.000141 s
File: mtfcoding2.py
Function: encode_main at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def encode_main(textfile):
    18         1            8      8.0      5.7      original_size=os.fstat(textfile.fileno()).st_size
    19                                               
    20         1            3      3.0      2.1      name=textfile.name.split(".")
    21         1            1      1.0      0.7      name[-1]="mtf"
    22         1            1      1.0      0.7      name=".".join(name)
    23         1            4      4.0      2.8      print("Writing to: ",name)
    24         1           34     34.0     24.1      outfile=open(name,"wb")
    25         1            5      5.0      3.5      outfile.write(bytearray(MAGIC))
    26                                               
    27         1            1      1.0      0.7      output=[]
    28         1            1      1.0      0.7      pile=[]
    29         1            1      1.0      0.7      codeLength=1
    30         2           14      7.0      9.9      for line in textfile:
    31         1            1      1.0      0.7          if len(line)>1:
    32         1            2      2.0      1.4              line=line.split(" ")
    33         1            1      1.0      0.7              line[-1] = line[-1][:-1]
    34        11            8      0.7      5.7              for word in line:
    35        10            4      0.4      2.8                  if word not in pile:
    36                                                               #print("Adding %s to pile" % word)
    37         7            5      0.7      3.5                      pile.append(word)
    38         7            6      0.9      4.3                      if len(pile)<=120:
    39         7            7      1.0      5.0                          output.append(chr(len(pile)+128))
    40                                                               elif len(pile)<=375:
    41                                                                   output.append(chr(121+128) + chr(len(pile)-121))
    42                                                               elif len(pile)<=65912:
    43                                                                   output.append(chr(122+128) + chr((len(pile)-376)//256) + chr((len(pile)-376)%256))
    44                                                               else:
    45                                                                   print("Too many unique words in the file")
    46                                                                   raise Error
    47         7            5      0.7      3.5                      output.append(word)
    48                                                           else:
    49         3            3      1.0      2.1                      index=pile.index(word)
    50         3            4      1.3      2.8                      pile.append(pile.pop(index))
    51         3            3      1.0      2.1                      if len(pile)-index<=120:
    52         3            3      1.0      2.1                          output.append(chr(len(pile)-index+128))
    53                                                               elif len(pile)-index<=375:
    54                                                                   output.append(chr(121+128) + chr(len(pile)-index-121))
    55                                                               else:
    56                                                                   output.append(chr(122+128) + chr((len(pile)-376-index)//256) + chr((len(pile)-376-index)%256))
    57         1            0      0.0      0.0          output.append("\n")
    58         1            1      1.0      0.7      output="".join(output)
    59         1            3      3.0      2.1      outfile.write(bytes(output,'latin-1'))
    60                                               
    61         1            2      2.0      1.4      compressed_size=len(bytearray(MAGIC)) + len(bytes(output,'latin-1'))
    62         1            3      3.0      2.1      print("Size of original file: ", original_size)
    63         1            2      2.0      1.4      print("Size of compressed file: ", compressed_size)
    64         1            5      5.0      3.5      print("Filesize has been reduced by %.2f%%" % ((original_size-compressed_size)/original_size*100))


Outputting to:  ./enctests/test00.txt
Wrote profile results to mtfdecode.py.lprof
Timer unit: 1e-06 s

Total time: 0.000608 s
File: mtfcoding3.py
Function: decode_main at line 83

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile
    84                                           def decode_main(mtffile):
    85         1           23     23.0      3.8      magic=mtffile.read(4)
    86         1          153    153.0     25.2      if(not re.match('úÎúß',magic) and not re.match('úÎúÞ',magic)):
    87                                                   raise Error
    88                                               
    89         1            1      1.0      0.2      output=[]
    90         1            1      1.0      0.2      pile=[]
    91         1            1      1.0      0.2      while True:
    92        11           31      2.8      5.1          ch=mtffile.read(1)
    93        11            6      0.5      1.0          if ch=='': break
    94        10            6      0.6      1.0          if ch=='\n':    output.append('\n')
    95        10            8      0.8      1.3          elif ord(ch)>0x80:
    96        10            5      0.5      0.8              if ord(ch)<=0xf8:
    97        10            7      0.7      1.2                  code=ord(ch)-0x80
    98        10            8      0.8      1.3                  if code>len(pile):
    99         7          128     18.3     21.1                      word=get_word(mtffile)
   100         7            5      0.7      0.8                      pile.append(word)
   101                                                           else:
   102         3            3      1.0      0.5                      word=pile.pop(len(pile)-code)
   103         3            2      0.7      0.3                      pile.append(word)
   104                                                       elif ord(ch)==0xf9:
   105                                                           ch=mtffile.read(1)
   106                                                           code=ord(ch)+121
   107                                                           if code>len(pile):
   108                                                               word=get_word(mtffile)
   109                                                               pile.append(word)
   110                                                           else:
   111                                                               word=pile.pop(len(pile)-code)
   112                                                               pile.append(word)
   113                                                       elif ord(ch)==0xfa:
   114                                                           ch=mtffile.read(1)
   115                                                           ch2=mtffile.read(1)
   116                                                           code=ord(ch)*256+ord(ch2)+376
   117                                                           if code>len(pile):
   118                                                               word=get_word(mtffile)
   119                                                               pile.append(word)
   120                                                           else:
   121                                                               word=pile.pop(len(pile)-code)
   122                                                               pile.append(word)
   123                                                       else:
   124                                                           raise Error
   125        10           27      2.7      4.4              if mtffile.read(1)=='\n':                     
   126         1            1      1.0      0.2                  output.append(word + "\n")
   127                                                       else:
   128         9            7      0.8      1.2                  output.append(word + " ")
   129         9           65      7.2     10.7                  mtffile.seek(mtffile.tell()-1)                
   130         1            2      2.0      0.3      name=mtffile.name.split(".")
   131         1            1      1.0      0.2      name[-1]="txt"
   132         1            1      1.0      0.2      name=".".join(name)
   133         1            1      1.0      0.2      output="".join(output)
   134         1            4      4.0      0.7      print("Outputting to: ",name)
   135         1           32     32.0      5.3      with open(name,'wb') as f:
   136         1           79     79.0     13.0          f.write(bytes(output,'latin-1'))

------------------------------


TEST 01
------------------------------
Writing to:  ./enctests/test01.mtf
Size of original file:  4
Size of compressed file:  9
Filesize has been reduced by -125.00%
Wrote profile results to mtfencode.py.lprof
Timer unit: 1e-06 s

Total time: 0.000102 s
File: mtfcoding2.py
Function: encode_main at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def encode_main(textfile):
    18         1            8      8.0      7.8      original_size=os.fstat(textfile.fileno()).st_size
    19                                               
    20         1            3      3.0      2.9      name=textfile.name.split(".")
    21         1            1      1.0      1.0      name[-1]="mtf"
    22         1            1      1.0      1.0      name=".".join(name)
    23         1            4      4.0      3.9      print("Writing to: ",name)
    24         1           34     34.0     33.3      outfile=open(name,"wb")
    25         1            6      6.0      5.9      outfile.write(bytearray(MAGIC))
    26                                               
    27         1            0      0.0      0.0      output=[]
    28         1            1      1.0      1.0      pile=[]
    29         1            1      1.0      1.0      codeLength=1
    30         2           15      7.5     14.7      for line in textfile:
    31         1            1      1.0      1.0          if len(line)>1:
    32         1            1      1.0      1.0              line=line.split(" ")
    33         1            2      2.0      2.0              line[-1] = line[-1][:-1]
    34         2            2      1.0      2.0              for word in line:
    35         1            1      1.0      1.0                  if word not in pile:
    36                                                               #print("Adding %s to pile" % word)
    37         1            1      1.0      1.0                      pile.append(word)
    38         1            0      0.0      0.0                      if len(pile)<=120:
    39         1            2      2.0      2.0                          output.append(chr(len(pile)+128))
    40                                                               elif len(pile)<=375:
    41                                                                   output.append(chr(121+128) + chr(len(pile)-121))
    42                                                               elif len(pile)<=65912:
    43                                                                   output.append(chr(122+128) + chr((len(pile)-376)//256) + chr((len(pile)-376)%256))
    44                                                               else:
    45                                                                   print("Too many unique words in the file")
    46                                                                   raise Error
    47         1            1      1.0      1.0                      output.append(word)
    48                                                           else:
    49                                                               index=pile.index(word)
    50                                                               pile.append(pile.pop(index))
    51                                                               if len(pile)-index<=120:
    52                                                                   output.append(chr(len(pile)-index+128))
    53                                                               elif len(pile)-index<=375:
    54                                                                   output.append(chr(121+128) + chr(len(pile)-index-121))
    55                                                               else:
    56                                                                   output.append(chr(122+128) + chr((len(pile)-376-index)//256) + chr((len(pile)-376-index)%256))
    57         1            1      1.0      1.0          output.append("\n")
    58         1            1      1.0      1.0      output="".join(output)
    59         1            3      3.0      2.9      outfile.write(bytes(output,'latin-1'))
    60                                               
    61         1            2      2.0      2.0      compressed_size=len(bytearray(MAGIC)) + len(bytes(output,'latin-1'))
    62         1            3      3.0      2.9      print("Size of original file: ", original_size)
    63         1            2      2.0      2.0      print("Size of compressed file: ", compressed_size)
    64         1            5      5.0      4.9      print("Filesize has been reduced by %.2f%%" % ((original_size-compressed_size)/original_size*100))


Outputting to:  ./enctests/test01.txt
Wrote profile results to mtfdecode.py.lprof
Timer unit: 1e-06 s

Total time: 0.000341 s
File: mtfcoding3.py
Function: decode_main at line 83

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile
    84                                           def decode_main(mtffile):
    85         1           22     22.0      6.5      magic=mtffile.read(4)
    86         1          152    152.0     44.6      if(not re.match('úÎúß',magic) and not re.match('úÎúÞ',magic)):
    87                                                   raise Error
    88                                               
    89         1            1      1.0      0.3      output=[]
    90         1            0      0.0      0.0      pile=[]
    91         1            0      0.0      0.0      while True:
    92         2            4      2.0      1.2          ch=mtffile.read(1)
    93         2            2      1.0      0.6          if ch=='': break
    94         1            1      1.0      0.3          if ch=='\n':    output.append('\n')
    95         1            1      1.0      0.3          elif ord(ch)>0x80:
    96         1            0      0.0      0.0              if ord(ch)<=0xf8:
    97         1            1      1.0      0.3                  code=ord(ch)-0x80
    98         1            0      0.0      0.0                  if code>len(pile):
    99         1           36     36.0     10.6                      word=get_word(mtffile)
   100         1            1      1.0      0.3                      pile.append(word)
   101                                                           else:
   102                                                               word=pile.pop(len(pile)-code)
   103                                                               pile.append(word)
   104                                                       elif ord(ch)==0xf9:
   105                                                           ch=mtffile.read(1)
   106                                                           code=ord(ch)+121
   107                                                           if code>len(pile):
   108                                                               word=get_word(mtffile)
   109                                                               pile.append(word)
   110                                                           else:
   111                                                               word=pile.pop(len(pile)-code)
   112                                                               pile.append(word)
   113                                                       elif ord(ch)==0xfa:
   114                                                           ch=mtffile.read(1)
   115                                                           ch2=mtffile.read(1)
   116                                                           code=ord(ch)*256+ord(ch2)+376
   117                                                           if code>len(pile):
   118                                                               word=get_word(mtffile)
   119                                                               pile.append(word)
   120                                                           else:
   121                                                               word=pile.pop(len(pile)-code)
   122                                                               pile.append(word)
   123                                                       else:
   124                                                           raise Error
   125         1            5      5.0      1.5              if mtffile.read(1)=='\n':                     
   126         1            0      0.0      0.0                  output.append(word + "\n")
   127                                                       else:
   128                                                           output.append(word + " ")
   129                                                           mtffile.seek(mtffile.tell()-1)                
   130         1            2      2.0      0.6      name=mtffile.name.split(".")
   131         1            1      1.0      0.3      name[-1]="txt"
   132         1            1      1.0      0.3      name=".".join(name)
   133         1            0      0.0      0.0      output="".join(output)
   134         1            4      4.0      1.2      print("Outputting to: ",name)
   135         1           30     30.0      8.8      with open(name,'wb') as f:
   136         1           77     77.0     22.6          f.write(bytes(output,'latin-1'))

------------------------------


TEST 02
------------------------------
Writing to:  ./enctests/test02.mtf
Size of original file:  12
Size of compressed file:  11
Filesize has been reduced by 8.33%
Wrote profile results to mtfencode.py.lprof
Timer unit: 1e-06 s

Total time: 0.000111 s
File: mtfcoding2.py
Function: encode_main at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def encode_main(textfile):
    18         1            7      7.0      6.3      original_size=os.fstat(textfile.fileno()).st_size
    19                                               
    20         1            2      2.0      1.8      name=textfile.name.split(".")
    21         1            2      2.0      1.8      name[-1]="mtf"
    22         1            2      2.0      1.8      name=".".join(name)
    23         1            5      5.0      4.5      print("Writing to: ",name)
    24         1           34     34.0     30.6      outfile=open(name,"wb")
    25         1            6      6.0      5.4      outfile.write(bytearray(MAGIC))
    26                                               
    27         1            1      1.0      0.9      output=[]
    28         1            1      1.0      0.9      pile=[]
    29         1            1      1.0      0.9      codeLength=1
    30         2           12      6.0     10.8      for line in textfile:
    31         1            1      1.0      0.9          if len(line)>1:
    32         1            1      1.0      0.9              line=line.split(" ")
    33         1            1      1.0      0.9              line[-1] = line[-1][:-1]
    34         4            4      1.0      3.6              for word in line:
    35         3            2      0.7      1.8                  if word not in pile:
    36                                                               #print("Adding %s to pile" % word)
    37         1            0      0.0      0.0                      pile.append(word)
    38         1            1      1.0      0.9                      if len(pile)<=120:
    39         1            2      2.0      1.8                          output.append(chr(len(pile)+128))
    40                                                               elif len(pile)<=375:
    41                                                                   output.append(chr(121+128) + chr(len(pile)-121))
    42                                                               elif len(pile)<=65912:
    43                                                                   output.append(chr(122+128) + chr((len(pile)-376)//256) + chr((len(pile)-376)%256))
    44                                                               else:
    45                                                                   print("Too many unique words in the file")
    46                                                                   raise Error
    47         1            0      0.0      0.0                      output.append(word)
    48                                                           else:
    49         2            2      1.0      1.8                      index=pile.index(word)
    50         2            2      1.0      1.8                      pile.append(pile.pop(index))
    51         2            1      0.5      0.9                      if len(pile)-index<=120:
    52         2            2      1.0      1.8                          output.append(chr(len(pile)-index+128))
    53                                                               elif len(pile)-index<=375:
    54                                                                   output.append(chr(121+128) + chr(len(pile)-index-121))
    55                                                               else:
    56                                                                   output.append(chr(122+128) + chr((len(pile)-376-index)//256) + chr((len(pile)-376-index)%256))
    57         1            1      1.0      0.9          output.append("\n")
    58         1            1      1.0      0.9      output="".join(output)
    59         1            3      3.0      2.7      outfile.write(bytes(output,'latin-1'))
    60                                               
    61         1            3      3.0      2.7      compressed_size=len(bytearray(MAGIC)) + len(bytes(output,'latin-1'))
    62         1            3      3.0      2.7      print("Size of original file: ", original_size)
    63         1            2      2.0      1.8      print("Size of compressed file: ", compressed_size)
    64         1            6      6.0      5.4      print("Filesize has been reduced by %.2f%%" % ((original_size-compressed_size)/original_size*100))


Outputting to:  ./enctests/test02.txt
Wrote profile results to mtfdecode.py.lprof
Timer unit: 1e-06 s

Total time: 0.000501 s
File: mtfcoding3.py
Function: decode_main at line 83

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile
    84                                           def decode_main(mtffile):
    85         1          125    125.0     25.0      magic=mtffile.read(4)
    86         1          160    160.0     31.9      if(not re.match('úÎúß',magic) and not re.match('úÎúÞ',magic)):
    87                                                   raise Error
    88                                               
    89         1            1      1.0      0.2      output=[]
    90         1            1      1.0      0.2      pile=[]
    91         1            1      1.0      0.2      while True:
    92         4           10      2.5      2.0          ch=mtffile.read(1)
    93         4            4      1.0      0.8          if ch=='': break
    94         3            2      0.7      0.4          if ch=='\n':    output.append('\n')
    95         3            2      0.7      0.4          elif ord(ch)>0x80:
    96         3            3      1.0      0.6              if ord(ch)<=0xf8:
    97         3            0      0.0      0.0                  code=ord(ch)-0x80
    98         3            3      1.0      0.6                  if code>len(pile):
    99         1           37     37.0      7.4                      word=get_word(mtffile)
   100         1            1      1.0      0.2                      pile.append(word)
   101                                                           else:
   102         2            3      1.5      0.6                      word=pile.pop(len(pile)-code)
   103         2            2      1.0      0.4                      pile.append(word)
   104                                                       elif ord(ch)==0xf9:
   105                                                           ch=mtffile.read(1)
   106                                                           code=ord(ch)+121
   107                                                           if code>len(pile):
   108                                                               word=get_word(mtffile)
   109                                                               pile.append(word)
   110                                                           else:
   111                                                               word=pile.pop(len(pile)-code)
   112                                                               pile.append(word)
   113                                                       elif ord(ch)==0xfa:
   114                                                           ch=mtffile.read(1)
   115                                                           ch2=mtffile.read(1)
   116                                                           code=ord(ch)*256+ord(ch2)+376
   117                                                           if code>len(pile):
   118                                                               word=get_word(mtffile)
   119                                                               pile.append(word)
   120                                                           else:
   121                                                               word=pile.pop(len(pile)-code)
   122                                                               pile.append(word)
   123                                                       else:
   124                                                           raise Error
   125         3            7      2.3      1.4              if mtffile.read(1)=='\n':                     
   126         1            1      1.0      0.2                  output.append(word + "\n")
   127                                                       else:
   128         2            1      0.5      0.2                  output.append(word + " ")
   129         2           17      8.5      3.4                  mtffile.seek(mtffile.tell()-1)                
   130         1            2      2.0      0.4      name=mtffile.name.split(".")
   131         1            1      1.0      0.2      name[-1]="txt"
   132         1            1      1.0      0.2      name=".".join(name)
   133         1            1      1.0      0.2      output="".join(output)
   134         1            4      4.0      0.8      print("Outputting to: ",name)
   135         1           33     33.0      6.6      with open(name,'wb') as f:
   136         1           78     78.0     15.6          f.write(bytes(output,'latin-1'))

------------------------------


TEST 03
------------------------------
Writing to:  ./enctests/test03.mtf
Size of original file:  12
Size of compressed file:  13
Filesize has been reduced by -8.33%
Wrote profile results to mtfencode.py.lprof
Timer unit: 1e-06 s

Total time: 1e-06 s
File: mtfcoding2.py
Function: encode_main at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def encode_main(textfile):
    18         1            0      0.0      0.0      original_size=os.fstat(textfile.fileno()).st_size
    19                                               
    20         1            0      0.0      0.0      name=textfile.name.split(".")
    21         1            0      0.0      0.0      name[-1]="mtf"
    22         1            0      0.0      0.0      name=".".join(name)
    23         1            0      0.0      0.0      print("Writing to: ",name)
    24         1            0      0.0      0.0      outfile=open(name,"wb")
    25         1            0      0.0      0.0      outfile.write(bytearray(MAGIC))
    26                                               
    27         1            0      0.0      0.0      output=[]
    28         1            0      0.0      0.0      pile=[]
    29         1            0      0.0      0.0      codeLength=1
    30         4            0      0.0      0.0      for line in textfile:
    31         3            0      0.0      0.0          if len(line)>1:
    32         3            0      0.0      0.0              line=line.split(" ")
    33         3            1      0.3    100.0              line[-1] = line[-1][:-1]
    34         6            0      0.0      0.0              for word in line:
    35         3            0      0.0      0.0                  if word not in pile:
    36                                                               #print("Adding %s to pile" % word)
    37         1            0      0.0      0.0                      pile.append(word)
    38         1            0      0.0      0.0                      if len(pile)<=120:
    39         1            0      0.0      0.0                          output.append(chr(len(pile)+128))
    40                                                               elif len(pile)<=375:
    41                                                                   output.append(chr(121+128) + chr(len(pile)-121))
    42                                                               elif len(pile)<=65912:
    43                                                                   output.append(chr(122+128) + chr((len(pile)-376)//256) + chr((len(pile)-376)%256))
    44                                                               else:
    45                                                                   print("Too many unique words in the file")
    46                                                                   raise Error
    47         1            0      0.0      0.0                      output.append(word)
    48                                                           else:
    49         2            0      0.0      0.0                      index=pile.index(word)
    50         2            0      0.0      0.0                      pile.append(pile.pop(index))
    51         2            0      0.0      0.0                      if len(pile)-index<=120:
    52         2            0      0.0      0.0                          output.append(chr(len(pile)-index+128))
    53                                                               elif len(pile)-index<=375:
    54                                                                   output.append(chr(121+128) + chr(len(pile)-index-121))
    55                                                               else:
    56                                                                   output.append(chr(122+128) + chr((len(pile)-376-index)//256) + chr((len(pile)-376-index)%256))
    57         3            0      0.0      0.0          output.append("\n")
    58         1            0      0.0      0.0      output="".join(output)
    59         1            0      0.0      0.0      outfile.write(bytes(output,'latin-1'))
    60                                               
    61         1            0      0.0      0.0      compressed_size=len(bytearray(MAGIC)) + len(bytes(output,'latin-1'))
    62         1            0      0.0      0.0      print("Size of original file: ", original_size)
    63         1            0      0.0      0.0      print("Size of compressed file: ", compressed_size)
    64         1            0      0.0      0.0      print("Filesize has been reduced by %.2f%%" % ((original_size-compressed_size)/original_size*100))


Outputting to:  ./enctests/test03.txt
Wrote profile results to mtfdecode.py.lprof
Timer unit: 1e-06 s

Total time: 0.000356 s
File: mtfcoding3.py
Function: decode_main at line 83

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile
    84                                           def decode_main(mtffile):
    85         1           22     22.0      6.2      magic=mtffile.read(4)
    86         1          151    151.0     42.4      if(not re.match('úÎúß',magic) and not re.match('úÎúÞ',magic)):
    87                                                   raise Error
    88                                               
    89         1            1      1.0      0.3      output=[]
    90         1            1      1.0      0.3      pile=[]
    91         1            0      0.0      0.0      while True:
    92         4            5      1.2      1.4          ch=mtffile.read(1)
    93         4            2      0.5      0.6          if ch=='': break
    94         3            1      0.3      0.3          if ch=='\n':    output.append('\n')
    95         3            3      1.0      0.8          elif ord(ch)>0x80:
    96         3            0      0.0      0.0              if ord(ch)<=0xf8:
    97         3            3      1.0      0.8                  code=ord(ch)-0x80
    98         3            3      1.0      0.8                  if code>len(pile):
    99         1           35     35.0      9.8                      word=get_word(mtffile)
   100         1            1      1.0      0.3                      pile.append(word)
   101                                                           else:
   102         2            2      1.0      0.6                      word=pile.pop(len(pile)-code)
   103         2            1      0.5      0.3                      pile.append(word)
   104                                                       elif ord(ch)==0xf9:
   105                                                           ch=mtffile.read(1)
   106                                                           code=ord(ch)+121
   107                                                           if code>len(pile):
   108                                                               word=get_word(mtffile)
   109                                                               pile.append(word)
   110                                                           else:
   111                                                               word=pile.pop(len(pile)-code)
   112                                                               pile.append(word)
   113                                                       elif ord(ch)==0xfa:
   114                                                           ch=mtffile.read(1)
   115                                                           ch2=mtffile.read(1)
   116                                                           code=ord(ch)*256+ord(ch2)+376
   117                                                           if code>len(pile):
   118                                                               word=get_word(mtffile)
   119                                                               pile.append(word)
   120                                                           else:
   121                                                               word=pile.pop(len(pile)-code)
   122                                                               pile.append(word)
   123                                                       else:
   124                                                           raise Error
   125         3            6      2.0      1.7              if mtffile.read(1)=='\n':                     
   126         3            3      1.0      0.8                  output.append(word + "\n")
   127                                                       else:
   128                                                           output.append(word + " ")
   129                                                           mtffile.seek(mtffile.tell()-1)                
   130         1            2      2.0      0.6      name=mtffile.name.split(".")
   131         1            1      1.0      0.3      name[-1]="txt"
   132         1            1      1.0      0.3      name=".".join(name)
   133         1            1      1.0      0.3      output="".join(output)
   134         1            4      4.0      1.1      print("Outputting to: ",name)
   135         1           31     31.0      8.7      with open(name,'wb') as f:
   136         1           76     76.0     21.3          f.write(bytes(output,'latin-1'))

------------------------------


TEST 04
------------------------------
Writing to:  ./enctests/test04.mtf
Size of original file:  16
Size of compressed file:  21
Filesize has been reduced by -31.25%
Wrote profile results to mtfencode.py.lprof
Timer unit: 1e-06 s

Total time: 0.000113 s
File: mtfcoding2.py
Function: encode_main at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def encode_main(textfile):
    18         1            8      8.0      7.1      original_size=os.fstat(textfile.fileno()).st_size
    19                                               
    20         1            3      3.0      2.7      name=textfile.name.split(".")
    21         1            1      1.0      0.9      name[-1]="mtf"
    22         1            1      1.0      0.9      name=".".join(name)
    23         1            4      4.0      3.5      print("Writing to: ",name)
    24         1           34     34.0     30.1      outfile=open(name,"wb")
    25         1            6      6.0      5.3      outfile.write(bytearray(MAGIC))
    26                                               
    27         1            1      1.0      0.9      output=[]
    28         1            1      1.0      0.9      pile=[]
    29         1            1      1.0      0.9      codeLength=1
    30         2           14      7.0     12.4      for line in textfile:
    31         1            2      2.0      1.8          if len(line)>1:
    32         1            2      2.0      1.8              line=line.split(" ")
    33         1            1      1.0      0.9              line[-1] = line[-1][:-1]
    34         5            4      0.8      3.5              for word in line:
    35         4            1      0.2      0.9                  if word not in pile:
    36                                                               #print("Adding %s to pile" % word)
    37         4            3      0.8      2.7                      pile.append(word)
    38         4            2      0.5      1.8                      if len(pile)<=120:
    39         4            4      1.0      3.5                          output.append(chr(len(pile)+128))
    40                                                               elif len(pile)<=375:
    41                                                                   output.append(chr(121+128) + chr(len(pile)-121))
    42                                                               elif len(pile)<=65912:
    43                                                                   output.append(chr(122+128) + chr((len(pile)-376)//256) + chr((len(pile)-376)%256))
    44                                                               else:
    45                                                                   print("Too many unique words in the file")
    46                                                                   raise Error
    47         4            3      0.8      2.7                      output.append(word)
    48                                                           else:
    49                                                               index=pile.index(word)
    50                                                               pile.append(pile.pop(index))
    51                                                               if len(pile)-index<=120:
    52                                                                   output.append(chr(len(pile)-index+128))
    53                                                               elif len(pile)-index<=375:
    54                                                                   output.append(chr(121+128) + chr(len(pile)-index-121))
    55                                                               else:
    56                                                                   output.append(chr(122+128) + chr((len(pile)-376-index)//256) + chr((len(pile)-376-index)%256))
    57         1            1      1.0      0.9          output.append("\n")
    58         1            1      1.0      0.9      output="".join(output)
    59         1            2      2.0      1.8      outfile.write(bytes(output,'latin-1'))
    60                                               
    61         1            2      2.0      1.8      compressed_size=len(bytearray(MAGIC)) + len(bytes(output,'latin-1'))
    62         1            3      3.0      2.7      print("Size of original file: ", original_size)
    63         1            2      2.0      1.8      print("Size of compressed file: ", compressed_size)
    64         1            6      6.0      5.3      print("Filesize has been reduced by %.2f%%" % ((original_size-compressed_size)/original_size*100))


Outputting to:  ./enctests/test04.txt
Wrote profile results to mtfdecode.py.lprof
Timer unit: 1e-06 s

Total time: 0.000456 s
File: mtfcoding3.py
Function: decode_main at line 83

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile
    84                                           def decode_main(mtffile):
    85         1           22     22.0      4.8      magic=mtffile.read(4)
    86         1          153    153.0     33.6      if(not re.match('úÎúß',magic) and not re.match('úÎúÞ',magic)):
    87                                                   raise Error
    88                                               
    89         1            1      1.0      0.2      output=[]
    90         1            0      0.0      0.0      pile=[]
    91         1            1      1.0      0.2      while True:
    92         5           14      2.8      3.1          ch=mtffile.read(1)
    93         5            3      0.6      0.7          if ch=='': break
    94         4            4      1.0      0.9          if ch=='\n':    output.append('\n')
    95         4            3      0.8      0.7          elif ord(ch)>0x80:
    96         4            2      0.5      0.4              if ord(ch)<=0xf8:
    97         4            4      1.0      0.9                  code=ord(ch)-0x80
    98         4            3      0.8      0.7                  if code>len(pile):
    99         4           82     20.5     18.0                      word=get_word(mtffile)
   100         4            4      1.0      0.9                      pile.append(word)
   101                                                           else:
   102                                                               word=pile.pop(len(pile)-code)
   103                                                               pile.append(word)
   104                                                       elif ord(ch)==0xf9:
   105                                                           ch=mtffile.read(1)
   106                                                           code=ord(ch)+121
   107                                                           if code>len(pile):
   108                                                               word=get_word(mtffile)
   109                                                               pile.append(word)
   110                                                           else:
   111                                                               word=pile.pop(len(pile)-code)
   112                                                               pile.append(word)
   113                                                       elif ord(ch)==0xfa:
   114                                                           ch=mtffile.read(1)
   115                                                           ch2=mtffile.read(1)
   116                                                           code=ord(ch)*256+ord(ch2)+376
   117                                                           if code>len(pile):
   118                                                               word=get_word(mtffile)
   119                                                               pile.append(word)
   120                                                           else:
   121                                                               word=pile.pop(len(pile)-code)
   122                                                               pile.append(word)
   123                                                       else:
   124                                                           raise Error
   125         4           17      4.2      3.7              if mtffile.read(1)=='\n':                     
   126         1            1      1.0      0.2                  output.append(word + "\n")
   127                                                       else:
   128         3            3      1.0      0.7                  output.append(word + " ")
   129         3           23      7.7      5.0                  mtffile.seek(mtffile.tell()-1)                
   130         1            2      2.0      0.4      name=mtffile.name.split(".")
   131         1            1      1.0      0.2      name[-1]="txt"
   132         1            1      1.0      0.2      name=".".join(name)
   133         1            1      1.0      0.2      output="".join(output)
   134         1            4      4.0      0.9      print("Outputting to: ",name)
   135         1           32     32.0      7.0      with open(name,'wb') as f:
   136         1           75     75.0     16.4          f.write(bytes(output,'latin-1'))

------------------------------


TEST 05
------------------------------
Writing to:  ./enctests/test05.mtf
Size of original file:  16
Size of compressed file:  24
Filesize has been reduced by -50.00%
Wrote profile results to mtfencode.py.lprof
Timer unit: 1e-06 s

Total time: 0.000137 s
File: mtfcoding2.py
Function: encode_main at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def encode_main(textfile):
    18         1            7      7.0      5.1      original_size=os.fstat(textfile.fileno()).st_size
    19                                               
    20         1            3      3.0      2.2      name=textfile.name.split(".")
    21         1            1      1.0      0.7      name[-1]="mtf"
    22         1            2      2.0      1.5      name=".".join(name)
    23         1            4      4.0      2.9      print("Writing to: ",name)
    24         1           34     34.0     24.8      outfile=open(name,"wb")
    25         1            5      5.0      3.6      outfile.write(bytearray(MAGIC))
    26                                               
    27         1            1      1.0      0.7      output=[]
    28         1            1      1.0      0.7      pile=[]
    29         1            0      0.0      0.0      codeLength=1
    30         5           19      3.8     13.9      for line in textfile:
    31         4            4      1.0      2.9          if len(line)>1:
    32         4            3      0.8      2.2              line=line.split(" ")
    33         4            4      1.0      2.9              line[-1] = line[-1][:-1]
    34         8            7      0.9      5.1              for word in line:
    35         4            6      1.5      4.4                  if word not in pile:
    36                                                               #print("Adding %s to pile" % word)
    37         4            4      1.0      2.9                      pile.append(word)
    38         4            4      1.0      2.9                      if len(pile)<=120:
    39         4            6      1.5      4.4                          output.append(chr(len(pile)+128))
    40                                                               elif len(pile)<=375:
    41                                                                   output.append(chr(121+128) + chr(len(pile)-121))
    42                                                               elif len(pile)<=65912:
    43                                                                   output.append(chr(122+128) + chr((len(pile)-376)//256) + chr((len(pile)-376)%256))
    44                                                               else:
    45                                                                   print("Too many unique words in the file")
    46                                                                   raise Error
    47         4            2      0.5      1.5                      output.append(word)
    48                                                           else:
    49                                                               index=pile.index(word)
    50                                                               pile.append(pile.pop(index))
    51                                                               if len(pile)-index<=120:
    52                                                                   output.append(chr(len(pile)-index+128))
    53                                                               elif len(pile)-index<=375:
    54                                                                   output.append(chr(121+128) + chr(len(pile)-index-121))
    55                                                               else:
    56                                                                   output.append(chr(122+128) + chr((len(pile)-376-index)//256) + chr((len(pile)-376-index)%256))
    57         4            2      0.5      1.5          output.append("\n")
    58         1            2      2.0      1.5      output="".join(output)
    59         1            2      2.0      1.5      outfile.write(bytes(output,'latin-1'))
    60                                               
    61         1            3      3.0      2.2      compressed_size=len(bytearray(MAGIC)) + len(bytes(output,'latin-1'))
    62         1            3      3.0      2.2      print("Size of original file: ", original_size)
    63         1            2      2.0      1.5      print("Size of compressed file: ", compressed_size)
    64         1            6      6.0      4.4      print("Filesize has been reduced by %.2f%%" % ((original_size-compressed_size)/original_size*100))


Outputting to:  ./enctests/test05.txt
Wrote profile results to mtfdecode.py.lprof
Timer unit: 1e-06 s

Total time: 0.000204 s
File: mtfcoding3.py
Function: decode_main at line 83

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile
    84                                           def decode_main(mtffile):
    85         1            0      0.0      0.0      magic=mtffile.read(4)
    86         1            0      0.0      0.0      if(not re.match('úÎúß',magic) and not re.match('úÎúÞ',magic)):
    87                                                   raise Error
    88                                               
    89         1            0      0.0      0.0      output=[]
    90         1            0      0.0      0.0      pile=[]
    91         1            0      0.0      0.0      while True:
    92         5            5      1.0      2.5          ch=mtffile.read(1)
    93         5            2      0.4      1.0          if ch=='': break
    94         4            3      0.8      1.5          if ch=='\n':    output.append('\n')
    95         4            1      0.2      0.5          elif ord(ch)>0x80:
    96         4            3      0.8      1.5              if ord(ch)<=0xf8:
    97         4            2      0.5      1.0                  code=ord(ch)-0x80
    98         4            2      0.5      1.0                  if code>len(pile):
    99         4           52     13.0     25.5                      word=get_word(mtffile)
   100         4            2      0.5      1.0                      pile.append(word)
   101                                                           else:
   102                                                               word=pile.pop(len(pile)-code)
   103                                                               pile.append(word)
   104                                                       elif ord(ch)==0xf9:
   105                                                           ch=mtffile.read(1)
   106                                                           code=ord(ch)+121
   107                                                           if code>len(pile):
   108                                                               word=get_word(mtffile)
   109                                                               pile.append(word)
   110                                                           else:
   111                                                               word=pile.pop(len(pile)-code)
   112                                                               pile.append(word)
   113                                                       elif ord(ch)==0xfa:
   114                                                           ch=mtffile.read(1)
   115                                                           ch2=mtffile.read(1)
   116                                                           code=ord(ch)*256+ord(ch2)+376
   117                                                           if code>len(pile):
   118                                                               word=get_word(mtffile)
   119                                                               pile.append(word)
   120                                                           else:
   121                                                               word=pile.pop(len(pile)-code)
   122                                                               pile.append(word)
   123                                                       else:
   124                                                           raise Error
   125         4            9      2.2      4.4              if mtffile.read(1)=='\n':                     
   126         4            3      0.8      1.5                  output.append(word + "\n")
   127                                                       else:
   128                                                           output.append(word + " ")
   129                                                           mtffile.seek(mtffile.tell()-1)                
   130         1            2      2.0      1.0      name=mtffile.name.split(".")
   131         1            1      1.0      0.5      name[-1]="txt"
   132         1            1      1.0      0.5      name=".".join(name)
   133         1            1      1.0      0.5      output="".join(output)
   134         1            3      3.0      1.5      print("Outputting to: ",name)
   135         1           32     32.0     15.7      with open(name,'wb') as f:
   136         1           80     80.0     39.2          f.write(bytes(output,'latin-1'))

------------------------------


TEST 06
------------------------------
Writing to:  ./enctests/test06.mtf
Size of original file:  57
Size of compressed file:  44
Filesize has been reduced by 22.81%
Wrote profile results to mtfencode.py.lprof
Timer unit: 1e-06 s

Total time: 0.000206 s
File: mtfcoding2.py
Function: encode_main at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def encode_main(textfile):
    18         1            8      8.0      3.9      original_size=os.fstat(textfile.fileno()).st_size
    19                                               
    20         1            2      2.0      1.0      name=textfile.name.split(".")
    21         1            1      1.0      0.5      name[-1]="mtf"
    22         1            1      1.0      0.5      name=".".join(name)
    23         1            4      4.0      1.9      print("Writing to: ",name)
    24         1           34     34.0     16.5      outfile=open(name,"wb")
    25         1            6      6.0      2.9      outfile.write(bytearray(MAGIC))
    26                                               
    27         1            0      0.0      0.0      output=[]
    28         1            1      1.0      0.5      pile=[]
    29         1            1      1.0      0.5      codeLength=1
    30        16           25      1.6     12.1      for line in textfile:
    31        15            9      0.6      4.4          if len(line)>1:
    32        10           10      1.0      4.9              line=line.split(" ")
    33        10           10      1.0      4.9              line[-1] = line[-1][:-1]
    34        23           17      0.7      8.3              for word in line:
    35        13           10      0.8      4.9                  if word not in pile:
    36                                                               #print("Adding %s to pile" % word)
    37         4            2      0.5      1.0                      pile.append(word)
    38         4            2      0.5      1.0                      if len(pile)<=120:
    39         4            5      1.2      2.4                          output.append(chr(len(pile)+128))
    40                                                               elif len(pile)<=375:
    41                                                                   output.append(chr(121+128) + chr(len(pile)-121))
    42                                                               elif len(pile)<=65912:
    43                                                                   output.append(chr(122+128) + chr((len(pile)-376)//256) + chr((len(pile)-376)%256))
    44                                                               else:
    45                                                                   print("Too many unique words in the file")
    46                                                                   raise Error
    47         4            2      0.5      1.0                      output.append(word)
    48                                                           else:
    49         9            8      0.9      3.9                      index=pile.index(word)
    50         9           10      1.1      4.9                      pile.append(pile.pop(index))
    51         9            6      0.7      2.9                      if len(pile)-index<=120:
    52         9            7      0.8      3.4                          output.append(chr(len(pile)-index+128))
    53                                                               elif len(pile)-index<=375:
    54                                                                   output.append(chr(121+128) + chr(len(pile)-index-121))
    55                                                               else:
    56                                                                   output.append(chr(122+128) + chr((len(pile)-376-index)//256) + chr((len(pile)-376-index)%256))
    57        15            9      0.6      4.4          output.append("\n")
    58         1            1      1.0      0.5      output="".join(output)
    59         1            3      3.0      1.5      outfile.write(bytes(output,'latin-1'))
    60                                               
    61         1            2      2.0      1.0      compressed_size=len(bytearray(MAGIC)) + len(bytes(output,'latin-1'))
    62         1            3      3.0      1.5      print("Size of original file: ", original_size)
    63         1            1      1.0      0.5      print("Size of compressed file: ", compressed_size)
    64         1            6      6.0      2.9      print("Filesize has been reduced by %.2f%%" % ((original_size-compressed_size)/original_size*100))


Outputting to:  ./enctests/test06.txt
Wrote profile results to mtfdecode.py.lprof
Timer unit: 1e-06 s

Total time: 0.000554 s
File: mtfcoding3.py
Function: decode_main at line 83

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile
    84                                           def decode_main(mtffile):
    85         1           22     22.0      4.0      magic=mtffile.read(4)
    86         1          153    153.0     27.6      if(not re.match('úÎúß',magic) and not re.match('úÎúÞ',magic)):
    87                                                   raise Error
    88                                               
    89         1            1      1.0      0.2      output=[]
    90         1            1      1.0      0.2      pile=[]
    91         1            0      0.0      0.0      while True:
    92        19           25      1.3      4.5          ch=mtffile.read(1)
    93        19           11      0.6      2.0          if ch=='': break
    94        18            9      0.5      1.6          if ch=='\n':    output.append('\n')
    95        13           11      0.8      2.0          elif ord(ch)>0x80:
    96        13            7      0.5      1.3              if ord(ch)<=0xf8:
    97        13            9      0.7      1.6                  code=ord(ch)-0x80
    98        13           12      0.9      2.2                  if code>len(pile):
    99         4           89     22.2     16.1                      word=get_word(mtffile)
   100         4            2      0.5      0.4                      pile.append(word)
   101                                                           else:
   102         9            7      0.8      1.3                      word=pile.pop(len(pile)-code)
   103         9            7      0.8      1.3                      pile.append(word)
   104                                                       elif ord(ch)==0xf9:
   105                                                           ch=mtffile.read(1)
   106                                                           code=ord(ch)+121
   107                                                           if code>len(pile):
   108                                                               word=get_word(mtffile)
   109                                                               pile.append(word)
   110                                                           else:
   111                                                               word=pile.pop(len(pile)-code)
   112                                                               pile.append(word)
   113                                                       elif ord(ch)==0xfa:
   114                                                           ch=mtffile.read(1)
   115                                                           ch2=mtffile.read(1)
   116                                                           code=ord(ch)*256+ord(ch2)+376
   117                                                           if code>len(pile):
   118                                                               word=get_word(mtffile)
   119                                                               pile.append(word)
   120                                                           else:
   121                                                               word=pile.pop(len(pile)-code)
   122                                                               pile.append(word)
   123                                                       else:
   124                                                           raise Error
   125        13           21      1.6      3.8              if mtffile.read(1)=='\n':                     
   126        10            7      0.7      1.3                  output.append(word + "\n")
   127                                                       else:
   128         3            3      1.0      0.5                  output.append(word + " ")
   129         3           40     13.3      7.2                  mtffile.seek(mtffile.tell()-1)                
   130         1            3      3.0      0.5      name=mtffile.name.split(".")
   131         1            1      1.0      0.2      name[-1]="txt"
   132         1            1      1.0      0.2      name=".".join(name)
   133         1            1      1.0      0.2      output="".join(output)
   134         1            4      4.0      0.7      print("Outputting to: ",name)
   135         1           31     31.0      5.6      with open(name,'wb') as f:
   136         1           76     76.0     13.7          f.write(bytes(output,'latin-1'))

------------------------------


TEST 07
------------------------------
Writing to:  ./enctests/test07.mtf
Size of original file:  95
Size of compressed file:  93
Filesize has been reduced by 2.11%
Wrote profile results to mtfencode.py.lprof
Timer unit: 1e-06 s

Total time: 0.00024 s
File: mtfcoding2.py
Function: encode_main at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def encode_main(textfile):
    18         1            8      8.0      3.3      original_size=os.fstat(textfile.fileno()).st_size
    19                                               
    20         1            2      2.0      0.8      name=textfile.name.split(".")
    21         1            1      1.0      0.4      name[-1]="mtf"
    22         1            1      1.0      0.4      name=".".join(name)
    23         1            4      4.0      1.7      print("Writing to: ",name)
    24         1           34     34.0     14.2      outfile=open(name,"wb")
    25         1            6      6.0      2.5      outfile.write(bytearray(MAGIC))
    26                                               
    27         1            1      1.0      0.4      output=[]
    28         1            1      1.0      0.4      pile=[]
    29         1            1      1.0      0.4      codeLength=1
    30         5           24      4.8     10.0      for line in textfile:
    31         4            4      1.0      1.7          if len(line)>1:
    32         4            5      1.2      2.1              line=line.split(" ")
    33         4            5      1.2      2.1              line[-1] = line[-1][:-1]
    34        27           21      0.8      8.8              for word in line:
    35        23           20      0.9      8.3                  if word not in pile:
    36                                                               #print("Adding %s to pile" % word)
    37        20           15      0.8      6.2                      pile.append(word)
    38        20           12      0.6      5.0                      if len(pile)<=120:
    39        20           23      1.1      9.6                          output.append(chr(len(pile)+128))
    40                                                               elif len(pile)<=375:
    41                                                                   output.append(chr(121+128) + chr(len(pile)-121))
    42                                                               elif len(pile)<=65912:
    43                                                                   output.append(chr(122+128) + chr((len(pile)-376)//256) + chr((len(pile)-376)%256))
    44                                                               else:
    45                                                                   print("Too many unique words in the file")
    46                                                                   raise Error
    47        20           16      0.8      6.7                      output.append(word)
    48                                                           else:
    49         3            4      1.3      1.7                      index=pile.index(word)
    50         3            4      1.3      1.7                      pile.append(pile.pop(index))
    51         3            2      0.7      0.8                      if len(pile)-index<=120:
    52         3            3      1.0      1.2                          output.append(chr(len(pile)-index+128))
    53                                                               elif len(pile)-index<=375:
    54                                                                   output.append(chr(121+128) + chr(len(pile)-index-121))
    55                                                               else:
    56                                                                   output.append(chr(122+128) + chr((len(pile)-376-index)//256) + chr((len(pile)-376-index)%256))
    57         4            3      0.8      1.2          output.append("\n")
    58         1            2      2.0      0.8      output="".join(output)
    59         1            3      3.0      1.2      outfile.write(bytes(output,'latin-1'))
    60                                               
    61         1            2      2.0      0.8      compressed_size=len(bytearray(MAGIC)) + len(bytes(output,'latin-1'))
    62         1            4      4.0      1.7      print("Size of original file: ", original_size)
    63         1            2      2.0      0.8      print("Size of compressed file: ", compressed_size)
    64         1            7      7.0      2.9      print("Filesize has been reduced by %.2f%%" % ((original_size-compressed_size)/original_size*100))


Outputting to:  ./enctests/test07.txt
Wrote profile results to mtfdecode.py.lprof
Timer unit: 1e-06 s

Total time: 0.005955 s
File: mtfcoding3.py
Function: decode_main at line 83

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile
    84                                           def decode_main(mtffile):
    85         1           30     30.0      0.5      magic=mtffile.read(4)
    86         1          151    151.0      2.5      if(not re.match('úÎúß',magic) and not re.match('úÎúÞ',magic)):
    87                                                   raise Error
    88                                               
    89         1            1      1.0      0.0      output=[]
    90         1            0      0.0      0.0      pile=[]
    91         1            1      1.0      0.0      while True:
    92        24           76      3.2      1.3          ch=mtffile.read(1)
    93        24           26      1.1      0.4          if ch=='': break
    94        23           25      1.1      0.4          if ch=='\n':    output.append('\n')
    95        23           24      1.0      0.4          elif ord(ch)>0x80:
    96        23           23      1.0      0.4              if ord(ch)<=0xf8:
    97        23           20      0.9      0.3                  code=ord(ch)-0x80
    98        23           22      1.0      0.4                  if code>len(pile):
    99        20         5062    253.1     85.0                      word=get_word(mtffile)
   100        20           43      2.1      0.7                      pile.append(word)
   101                                                           else:
   102         3            4      1.3      0.1                      word=pile.pop(len(pile)-code)
   103         3            3      1.0      0.1                      pile.append(word)
   104                                                       elif ord(ch)==0xf9:
   105                                                           ch=mtffile.read(1)
   106                                                           code=ord(ch)+121
   107                                                           if code>len(pile):
   108                                                               word=get_word(mtffile)
   109                                                               pile.append(word)
   110                                                           else:
   111                                                               word=pile.pop(len(pile)-code)
   112                                                               pile.append(word)
   113                                                       elif ord(ch)==0xfa:
   114                                                           ch=mtffile.read(1)
   115                                                           ch2=mtffile.read(1)
   116                                                           code=ord(ch)*256+ord(ch2)+376
   117                                                           if code>len(pile):
   118                                                               word=get_word(mtffile)
   119                                                               pile.append(word)
   120                                                           else:
   121                                                               word=pile.pop(len(pile)-code)
   122                                                               pile.append(word)
   123                                                       else:
   124                                                           raise Error
   125        23          115      5.0      1.9              if mtffile.read(1)=='\n':                     
   126         4            4      1.0      0.1                  output.append(word + "\n")
   127                                                       else:
   128        19           37      1.9      0.6                  output.append(word + " ")
   129        19          168      8.8      2.8                  mtffile.seek(mtffile.tell()-1)                
   130         1            3      3.0      0.1      name=mtffile.name.split(".")
   131         1            1      1.0      0.0      name[-1]="txt"
   132         1            1      1.0      0.0      name=".".join(name)
   133         1            1      1.0      0.0      output="".join(output)
   134         1            4      4.0      0.1      print("Outputting to: ",name)
   135         1           34     34.0      0.6      with open(name,'wb') as f:
   136         1           76     76.0      1.3          f.write(bytes(output,'latin-1'))

------------------------------


TEST 08
------------------------------
Writing to:  ./enctests/test08.mtf
Size of original file:  184
Size of compressed file:  165
Filesize has been reduced by 10.33%
Wrote profile results to mtfencode.py.lprof
Timer unit: 1e-06 s

Total time: 0.000281 s
File: mtfcoding2.py
Function: encode_main at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def encode_main(textfile):
    18         1           15     15.0      5.3      original_size=os.fstat(textfile.fileno()).st_size
    19                                               
    20         1            0      0.0      0.0      name=textfile.name.split(".")
    21         1            0      0.0      0.0      name[-1]="mtf"
    22         1            0      0.0      0.0      name=".".join(name)
    23         1            0      0.0      0.0      print("Writing to: ",name)
    24         1            0      0.0      0.0      outfile=open(name,"wb")
    25         1            0      0.0      0.0      outfile.write(bytearray(MAGIC))
    26                                               
    27         1            0      0.0      0.0      output=[]
    28         1            0      0.0      0.0      pile=[]
    29         1            0      0.0      0.0      codeLength=1
    30        10           14      1.4      5.0      for line in textfile:
    31         9            5      0.6      1.8          if len(line)>1:
    32         8            7      0.9      2.5              line=line.split(" ")
    33         8            7      0.9      2.5              line[-1] = line[-1][:-1]
    34        52           33      0.6     11.7              for word in line:
    35        44           36      0.8     12.8                  if word not in pile:
    36                                                               #print("Adding %s to pile" % word)
    37        32           19      0.6      6.8                      pile.append(word)
    38        32           23      0.7      8.2                      if len(pile)<=120:
    39        32           29      0.9     10.3                          output.append(chr(len(pile)+128))
    40                                                               elif len(pile)<=375:
    41                                                                   output.append(chr(121+128) + chr(len(pile)-121))
    42                                                               elif len(pile)<=65912:
    43                                                                   output.append(chr(122+128) + chr((len(pile)-376)//256) + chr((len(pile)-376)%256))
    44                                                               else:
    45                                                                   print("Too many unique words in the file")
    46                                                                   raise Error
    47        32           25      0.8      8.9                      output.append(word)
    48                                                           else:
    49        12           12      1.0      4.3                      index=pile.index(word)
    50        12           11      0.9      3.9                      pile.append(pile.pop(index))
    51        12           11      0.9      3.9                      if len(pile)-index<=120:
    52        12            9      0.8      3.2                          output.append(chr(len(pile)-index+128))
    53                                                               elif len(pile)-index<=375:
    54                                                                   output.append(chr(121+128) + chr(len(pile)-index-121))
    55                                                               else:
    56                                                                   output.append(chr(122+128) + chr((len(pile)-376-index)//256) + chr((len(pile)-376-index)%256))
    57         9            6      0.7      2.1          output.append("\n")
    58         1            2      2.0      0.7      output="".join(output)
    59         1            3      3.0      1.1      outfile.write(bytes(output,'latin-1'))
    60                                               
    61         1            3      3.0      1.1      compressed_size=len(bytearray(MAGIC)) + len(bytes(output,'latin-1'))
    62         1            3      3.0      1.1      print("Size of original file: ", original_size)
    63         1            2      2.0      0.7      print("Size of compressed file: ", compressed_size)
    64         1            6      6.0      2.1      print("Filesize has been reduced by %.2f%%" % ((original_size-compressed_size)/original_size*100))


Outputting to:  ./enctests/test08.txt
Wrote profile results to mtfdecode.py.lprof
Timer unit: 1e-06 s

Total time: 0.006321 s
File: mtfcoding3.py
Function: decode_main at line 83

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile
    84                                           def decode_main(mtffile):
    85         1           23     23.0      0.4      magic=mtffile.read(4)
    86         1         4799   4799.0     75.9      if(not re.match('úÎúß',magic) and not re.match('úÎúÞ',magic)):
    87                                                   raise Error
    88                                               
    89         1            2      2.0      0.0      output=[]
    90         1            1      1.0      0.0      pile=[]
    91         1            0      0.0      0.0      while True:
    92        46          126      2.7      2.0          ch=mtffile.read(1)
    93        46           29      0.6      0.5          if ch=='': break
    94        45           33      0.7      0.5          if ch=='\n':    output.append('\n')
    95        44           26      0.6      0.4          elif ord(ch)>0x80:
    96        44           32      0.7      0.5              if ord(ch)<=0xf8:
    97        44           30      0.7      0.5                  code=ord(ch)-0x80
    98        44           27      0.6      0.4                  if code>len(pile):
    99        32          597     18.7      9.4                      word=get_word(mtffile)
   100        32           27      0.8      0.4                      pile.append(word)
   101                                                           else:
   102        12           12      1.0      0.2                      word=pile.pop(len(pile)-code)
   103        12            8      0.7      0.1                      pile.append(word)
   104                                                       elif ord(ch)==0xf9:
   105                                                           ch=mtffile.read(1)
   106                                                           code=ord(ch)+121
   107                                                           if code>len(pile):
   108                                                               word=get_word(mtffile)
   109                                                               pile.append(word)
   110                                                           else:
   111                                                               word=pile.pop(len(pile)-code)
   112                                                               pile.append(word)
   113                                                       elif ord(ch)==0xfa:
   114                                                           ch=mtffile.read(1)
   115                                                           ch2=mtffile.read(1)
   116                                                           code=ord(ch)*256+ord(ch2)+376
   117                                                           if code>len(pile):
   118                                                               word=get_word(mtffile)
   119                                                               pile.append(word)
   120                                                           else:
   121                                                               word=pile.pop(len(pile)-code)
   122                                                               pile.append(word)
   123                                                       else:
   124                                                           raise Error
   125        44          126      2.9      2.0              if mtffile.read(1)=='\n':                     
   126         8            7      0.9      0.1                  output.append(word + "\n")
   127                                                       else:
   128        36           32      0.9      0.5                  output.append(word + " ")
   129        36          262      7.3      4.1                  mtffile.seek(mtffile.tell()-1)                
   130         1            2      2.0      0.0      name=mtffile.name.split(".")
   131         1            0      0.0      0.0      name[-1]="txt"
   132         1            1      1.0      0.0      name=".".join(name)
   133         1            2      2.0      0.0      output="".join(output)
   134         1            4      4.0      0.1      print("Outputting to: ",name)
   135         1           34     34.0      0.5      with open(name,'wb') as f:
   136         1           79     79.0      1.2          f.write(bytes(output,'latin-1'))

------------------------------


TEST 09
------------------------------
Writing to:  ./enctests/test09.mtf
Size of original file:  643
Size of compressed file:  440
Filesize has been reduced by 31.57%
Wrote profile results to mtfencode.py.lprof
Timer unit: 1e-06 s

Total time: 0.005388 s
File: mtfcoding2.py
Function: encode_main at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def encode_main(textfile):
    18         1           14     14.0      0.3      original_size=os.fstat(textfile.fileno()).st_size
    19                                               
    20         1            8      8.0      0.1      name=textfile.name.split(".")
    21         1            6      6.0      0.1      name[-1]="mtf"
    22         1            5      5.0      0.1      name=".".join(name)
    23         1            8      8.0      0.1      print("Writing to: ",name)
    24         1         4401   4401.0     81.7      outfile=open(name,"wb")
    25         1            0      0.0      0.0      outfile.write(bytearray(MAGIC))
    26                                               
    27         1            0      0.0      0.0      output=[]
    28         1            0      0.0      0.0      pile=[]
    29         1            0      0.0      0.0      codeLength=1
    30        37           41      1.1      0.8      for line in textfile:
    31        36           27      0.8      0.5          if len(line)>1:
    32        32           31      1.0      0.6              line=line.split(" ")
    33        32           21      0.7      0.4              line[-1] = line[-1][:-1]
    34       186          125      0.7      2.3              for word in line:
    35       154          141      0.9      2.6                  if word not in pile:
    36                                                               #print("Adding %s to pile" % word)
    37        71           47      0.7      0.9                      pile.append(word)
    38        71           39      0.5      0.7                      if len(pile)<=120:
    39        71           52      0.7      1.0                          output.append(chr(len(pile)+128))
    40                                                               elif len(pile)<=375:
    41                                                                   output.append(chr(121+128) + chr(len(pile)-121))
    42                                                               elif len(pile)<=65912:
    43                                                                   output.append(chr(122+128) + chr((len(pile)-376)//256) + chr((len(pile)-376)%256))
    44                                                               else:
    45                                                                   print("Too many unique words in the file")
    46                                                                   raise Error
    47        71           58      0.8      1.1                      output.append(word)
    48                                                           else:
    49        83           89      1.1      1.7                      index=pile.index(word)
    50        83           90      1.1      1.7                      pile.append(pile.pop(index))
    51        83           60      0.7      1.1                      if len(pile)-index<=120:
    52        83           80      1.0      1.5                          output.append(chr(len(pile)-index+128))
    53                                                               elif len(pile)-index<=375:
    54                                                                   output.append(chr(121+128) + chr(len(pile)-index-121))
    55                                                               else:
    56                                                                   output.append(chr(122+128) + chr((len(pile)-376-index)//256) + chr((len(pile)-376-index)%256))
    57        36           25      0.7      0.5          output.append("\n")
    58         1            4      4.0      0.1      output="".join(output)
    59         1            3      3.0      0.1      outfile.write(bytes(output,'latin-1'))
    60                                               
    61         1            3      3.0      0.1      compressed_size=len(bytearray(MAGIC)) + len(bytes(output,'latin-1'))
    62         1            3      3.0      0.1      print("Size of original file: ", original_size)
    63         1            2      2.0      0.0      print("Size of compressed file: ", compressed_size)
    64         1            5      5.0      0.1      print("Filesize has been reduced by %.2f%%" % ((original_size-compressed_size)/original_size*100))


Outputting to:  ./enctests/test09.txt
Wrote profile results to mtfdecode.py.lprof
Timer unit: 1e-06 s

Total time: 0.013911 s
File: mtfcoding3.py
Function: decode_main at line 83

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile
    84                                           def decode_main(mtffile):
    85         1           24     24.0      0.2      magic=mtffile.read(4)
    86         1          206    206.0      1.5      if(not re.match('úÎúß',magic) and not re.match('úÎúÞ',magic)):
    87                                                   raise Error
    88                                               
    89         1            1      1.0      0.0      output=[]
    90         1            1      1.0      0.0      pile=[]
    91         1            1      1.0      0.0      while True:
    92       159          473      3.0      3.4          ch=mtffile.read(1)
    93       159          123      0.8      0.9          if ch=='': break
    94       158          111      0.7      0.8          if ch=='\n':    output.append('\n')
    95       154          125      0.8      0.9          elif ord(ch)>0x80:
    96       154          113      0.7      0.8              if ord(ch)<=0xf8:
    97       154          112      0.7      0.8                  code=ord(ch)-0x80
    98       154          116      0.8      0.8                  if code>len(pile):
    99        71         5397     76.0     38.8                      word=get_word(mtffile)
   100        71           57      0.8      0.4                      pile.append(word)
   101                                                           else:
   102        83           83      1.0      0.6                      word=pile.pop(len(pile)-code)
   103        83           67      0.8      0.5                      pile.append(word)
   104                                                       elif ord(ch)==0xf9:
   105                                                           ch=mtffile.read(1)
   106                                                           code=ord(ch)+121
   107                                                           if code>len(pile):
   108                                                               word=get_word(mtffile)
   109                                                               pile.append(word)
   110                                                           else:
   111                                                               word=pile.pop(len(pile)-code)
   112                                                               pile.append(word)
   113                                                       elif ord(ch)==0xfa:
   114                                                           ch=mtffile.read(1)
   115                                                           ch2=mtffile.read(1)
   116                                                           code=ord(ch)*256+ord(ch2)+376
   117                                                           if code>len(pile):
   118                                                               word=get_word(mtffile)
   119                                                               pile.append(word)
   120                                                           else:
   121                                                               word=pile.pop(len(pile)-code)
   122                                                               pile.append(word)
   123                                                       else:
   124                                                           raise Error
   125       154          363      2.4      2.6              if mtffile.read(1)=='\n':                     
   126        32           28      0.9      0.2                  output.append(word + "\n")
   127                                                       else:
   128       122          115      0.9      0.8                  output.append(word + " ")
   129       122         6234     51.1     44.8                  mtffile.seek(mtffile.tell()-1)                
   130         1           18     18.0      0.1      name=mtffile.name.split(".")
   131         1            1      1.0      0.0      name[-1]="txt"
   132         1            1      1.0      0.0      name=".".join(name)
   133         1            4      4.0      0.0      output="".join(output)
   134         1            5      5.0      0.0      print("Outputting to: ",name)
   135         1           37     37.0      0.3      with open(name,'wb') as f:
   136         1           95     95.0      0.7          f.write(bytes(output,'latin-1'))

------------------------------


TEST 10
------------------------------
Writing to:  ./enctests/test10.mtf
Size of original file:  1382
Size of compressed file:  799
Filesize has been reduced by 42.19%
Wrote profile results to mtfencode.py.lprof
Timer unit: 1e-06 s

Total time: 0.006868 s
File: mtfcoding2.py
Function: encode_main at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def encode_main(textfile):
    18         1            7      7.0      0.1      original_size=os.fstat(textfile.fileno()).st_size
    19                                               
    20         1            3      3.0      0.0      name=textfile.name.split(".")
    21         1            1      1.0      0.0      name[-1]="mtf"
    22         1            1      1.0      0.0      name=".".join(name)
    23         1            5      5.0      0.1      print("Writing to: ",name)
    24         1           91     91.0      1.3      outfile=open(name,"wb")
    25         1            6      6.0      0.1      outfile.write(bytearray(MAGIC))
    26                                               
    27         1            1      1.0      0.0      output=[]
    28         1            1      1.0      0.0      pile=[]
    29         1            0      0.0      0.0      codeLength=1
    30        73          103      1.4      1.5      for line in textfile:
    31        72           56      0.8      0.8          if len(line)>1:
    32        63           70      1.1      1.0              line=line.split(" ")
    33        63           59      0.9      0.9              line[-1] = line[-1][:-1]
    34       392          305      0.8      4.4              for word in line:
    35       329          464      1.4      6.8                  if word not in pile:
    36                                                               #print("Adding %s to pile" % word)
    37       112           82      0.7      1.2                      pile.append(word)
    38       112           89      0.8      1.3                      if len(pile)<=120:
    39       112         4276     38.2     62.3                          output.append(chr(len(pile)+128))
    40                                                               elif len(pile)<=375:
    41                                                                   output.append(chr(121+128) + chr(len(pile)-121))
    42                                                               elif len(pile)<=65912:
    43                                                                   output.append(chr(122+128) + chr((len(pile)-376)//256) + chr((len(pile)-376)%256))
    44                                                               else:
    45                                                                   print("Too many unique words in the file")
    46                                                                   raise Error
    47       112          157      1.4      2.3                      output.append(word)
    48                                                           else:
    49       217          327      1.5      4.8                      index=pile.index(word)
    50       217          230      1.1      3.3                      pile.append(pile.pop(index))
    51       217          252      1.2      3.7                      if len(pile)-index<=120:
    52       217          206      0.9      3.0                          output.append(chr(len(pile)-index+128))
    53                                                               elif len(pile)-index<=375:
    54                                                                   output.append(chr(121+128) + chr(len(pile)-index-121))
    55                                                               else:
    56                                                                   output.append(chr(122+128) + chr((len(pile)-376-index)//256) + chr((len(pile)-376-index)%256))
    57        72           53      0.7      0.8          output.append("\n")
    58         1            6      6.0      0.1      output="".join(output)
    59         1            3      3.0      0.0      outfile.write(bytes(output,'latin-1'))
    60                                               
    61         1            3      3.0      0.0      compressed_size=len(bytearray(MAGIC)) + len(bytes(output,'latin-1'))
    62         1            4      4.0      0.1      print("Size of original file: ", original_size)
    63         1            2      2.0      0.0      print("Size of compressed file: ", compressed_size)
    64         1            5      5.0      0.1      print("Filesize has been reduced by %.2f%%" % ((original_size-compressed_size)/original_size*100))


Outputting to:  ./enctests/test10.txt
Wrote profile results to mtfdecode.py.lprof
Timer unit: 1e-06 s

Total time: 0.018324 s
File: mtfcoding3.py
Function: decode_main at line 83

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile
    84                                           def decode_main(mtffile):
    85         1           24     24.0      0.1      magic=mtffile.read(4)
    86         1          152    152.0      0.8      if(not re.match('úÎúß',magic) and not re.match('úÎúÞ',magic)):
    87                                                   raise Error
    88                                               
    89         1            1      1.0      0.0      output=[]
    90         1            1      1.0      0.0      pile=[]
    91         1            1      1.0      0.0      while True:
    92       339         1001      3.0      5.5          ch=mtffile.read(1)
    93       339          260      0.8      1.4          if ch=='': break
    94       338          228      0.7      1.2          if ch=='\n':    output.append('\n')
    95       329          233      0.7      1.3          elif ord(ch)>0x80:
    96       329         4694     14.3     25.6              if ord(ch)<=0xf8:
    97       329          223      0.7      1.2                  code=ord(ch)-0x80
    98       329          223      0.7      1.2                  if code>len(pile):
    99       112         2729     24.4     14.9                      word=get_word(mtffile)
   100       112           96      0.9      0.5                      pile.append(word)
   101                                                           else:
   102       217          204      0.9      1.1                      word=pile.pop(len(pile)-code)
   103       217          164      0.8      0.9                      pile.append(word)
   104                                                       elif ord(ch)==0xf9:
   105                                                           ch=mtffile.read(1)
   106                                                           code=ord(ch)+121
   107                                                           if code>len(pile):
   108                                                               word=get_word(mtffile)
   109                                                               pile.append(word)
   110                                                           else:
   111                                                               word=pile.pop(len(pile)-code)
   112                                                               pile.append(word)
   113                                                       elif ord(ch)==0xfa:
   114                                                           ch=mtffile.read(1)
   115                                                           ch2=mtffile.read(1)
   116                                                           code=ord(ch)*256+ord(ch2)+376
   117                                                           if code>len(pile):
   118                                                               word=get_word(mtffile)
   119                                                               pile.append(word)
   120                                                           else:
   121                                                               word=pile.pop(len(pile)-code)
   122                                                               pile.append(word)
   123                                                       else:
   124                                                           raise Error
   125       329         5450     16.6     29.7              if mtffile.read(1)=='\n':                     
   126        63           46      0.7      0.3                  output.append(word + "\n")
   127                                                       else:
   128       266          224      0.8      1.2                  output.append(word + " ")
   129       266         2228      8.4     12.2                  mtffile.seek(mtffile.tell()-1)                
   130         1            3      3.0      0.0      name=mtffile.name.split(".")
   131         1            1      1.0      0.0      name[-1]="txt"
   132         1            1      1.0      0.0      name=".".join(name)
   133         1            9      9.0      0.0      output="".join(output)
   134         1            5      5.0      0.0      print("Outputting to: ",name)
   135         1           36     36.0      0.2      with open(name,'wb') as f:
   136         1           87     87.0      0.5          f.write(bytes(output,'latin-1'))

------------------------------


TEST 11
------------------------------
Writing to:  ./enctests/test11.mtf
Size of original file:  800
Size of compressed file:  1084
Filesize has been reduced by -35.50%
Wrote profile results to mtfencode.py.lprof
Timer unit: 1e-06 s

Total time: 0.01022 s
File: mtfcoding2.py
Function: encode_main at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def encode_main(textfile):
    18         1            9      9.0      0.1      original_size=os.fstat(textfile.fileno()).st_size
    19                                               
    20         1            3      3.0      0.0      name=textfile.name.split(".")
    21         1            1      1.0      0.0      name[-1]="mtf"
    22         1            1      1.0      0.0      name=".".join(name)
    23         1            4      4.0      0.0      print("Writing to: ",name)
    24         1          100    100.0      1.0      outfile=open(name,"wb")
    25         1            7      7.0      0.1      outfile.write(bytearray(MAGIC))
    26                                               
    27         1            1      1.0      0.0      output=[]
    28         1            0      0.0      0.0      pile=[]
    29         1            1      1.0      0.0      codeLength=1
    30       201          196      1.0      1.9      for line in textfile:
    31       200          150      0.8      1.5          if len(line)>1:
    32       200          202      1.0      2.0              line=line.split(" ")
    33       200          163      0.8      1.6              line[-1] = line[-1][:-1]
    34       400          298      0.7      2.9              for word in line:
    35       200         4363     21.8     42.7                  if word not in pile:
    36                                                               #print("Adding %s to pile" % word)
    37       200          164      0.8      1.6                      pile.append(word)
    38       200          170      0.8      1.7                      if len(pile)<=120:
    39       120          127      1.1      1.2                          output.append(chr(len(pile)+128))
    40        80         3826     47.8     37.4                      elif len(pile)<=375:
    41        80           86      1.1      0.8                          output.append(chr(121+128) + chr(len(pile)-121))
    42                                                               elif len(pile)<=65912:
    43                                                                   output.append(chr(122+128) + chr((len(pile)-376)//256) + chr((len(pile)-376)%256))
    44                                                               else:
    45                                                                   print("Too many unique words in the file")
    46                                                                   raise Error
    47       200          158      0.8      1.5                      output.append(word)
    48                                                           else:
    49                                                               index=pile.index(word)
    50                                                               pile.append(pile.pop(index))
    51                                                               if len(pile)-index<=120:
    52                                                                   output.append(chr(len(pile)-index+128))
    53                                                               elif len(pile)-index<=375:
    54                                                                   output.append(chr(121+128) + chr(len(pile)-index-121))
    55                                                               else:
    56                                                                   output.append(chr(122+128) + chr((len(pile)-376-index)//256) + chr((len(pile)-376-index)%256))
    57       200          163      0.8      1.6          output.append("\n")
    58         1            8      8.0      0.1      output="".join(output)
    59         1            4      4.0      0.0      outfile.write(bytes(output,'latin-1'))
    60                                               
    61         1            4      4.0      0.0      compressed_size=len(bytearray(MAGIC)) + len(bytes(output,'latin-1'))
    62         1            3      3.0      0.0      print("Size of original file: ", original_size)
    63         1            2      2.0      0.0      print("Size of compressed file: ", compressed_size)
    64         1            6      6.0      0.1      print("Filesize has been reduced by %.2f%%" % ((original_size-compressed_size)/original_size*100))


Outputting to:  ./enctests/test11.txt
Wrote profile results to mtfdecode.py.lprof
Timer unit: 1e-06 s

Total time: 0.011694 s
File: mtfcoding3.py
Function: decode_main at line 83

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile
    84                                           def decode_main(mtffile):
    85         1           46     46.0      0.4      magic=mtffile.read(4)
    86         1          182    182.0      1.6      if(not re.match('úÎúß',magic) and not re.match('úÎúÞ',magic)):
    87                                                   raise Error
    88                                               
    89         1            3      3.0      0.0      output=[]
    90         1            3      3.0      0.0      pile=[]
    91         1            2      2.0      0.0      while True:
    92       201          187      0.9      1.6          ch=mtffile.read(1)
    93       201          156      0.8      1.3          if ch=='': break
    94       200          137      0.7      1.2          if ch=='\n':    output.append('\n')
    95       200          155      0.8      1.3          elif ord(ch)>0x80:
    96       200          142      0.7      1.2              if ord(ch)<=0xf8:
    97       120           89      0.7      0.8                  code=ord(ch)-0x80
    98       120           94      0.8      0.8                  if code>len(pile):
    99       120         2359     19.7     20.2                      word=get_word(mtffile)
   100       120          124      1.0      1.1                      pile.append(word)
   101                                                           else:
   102                                                               word=pile.pop(len(pile)-code)
   103                                                               pile.append(word)
   104        80           67      0.8      0.6              elif ord(ch)==0xf9:
   105        80           82      1.0      0.7                  ch=mtffile.read(1)
   106        80           53      0.7      0.5                  code=ord(ch)+121
   107        80          120      1.5      1.0                  if code>len(pile):
   108        80         6174     77.2     52.8                      word=get_word(mtffile)
   109        80           79      1.0      0.7                      pile.append(word)
   110                                                           else:
   111                                                               word=pile.pop(len(pile)-code)
   112                                                               pile.append(word)
   113                                                       elif ord(ch)==0xfa:
   114                                                           ch=mtffile.read(1)
   115                                                           ch2=mtffile.read(1)
   116                                                           code=ord(ch)*256+ord(ch2)+376
   117                                                           if code>len(pile):
   118                                                               word=get_word(mtffile)
   119                                                               pile.append(word)
   120                                                           else:
   121                                                               word=pile.pop(len(pile)-code)
   122                                                               pile.append(word)
   123                                                       else:
   124                                                           raise Error
   125       200         1041      5.2      8.9              if mtffile.read(1)=='\n':                     
   126       200          244      1.2      2.1                  output.append(word + "\n")
   127                                                       else:
   128                                                           output.append(word + " ")
   129                                                           mtffile.seek(mtffile.tell()-1)                
   130         1            3      3.0      0.0      name=mtffile.name.split(".")
   131         1            1      1.0      0.0      name[-1]="txt"
   132         1            1      1.0      0.0      name=".".join(name)
   133         1            7      7.0      0.1      output="".join(output)
   134         1            4      4.0      0.0      print("Outputting to: ",name)
   135         1           33     33.0      0.3      with open(name,'wb') as f:
   136         1          106    106.0      0.9          f.write(bytes(output,'latin-1'))

------------------------------


TEST 12
------------------------------
Writing to:  ./enctests/test12.mtf
Size of original file:  800
Size of compressed file:  904
Filesize has been reduced by -13.00%
Wrote profile results to mtfencode.py.lprof
Timer unit: 1e-06 s

Total time: 0.010032 s
File: mtfcoding2.py
Function: encode_main at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def encode_main(textfile):
    18         1            8      8.0      0.1      original_size=os.fstat(textfile.fileno()).st_size
    19                                               
    20         1            3      3.0      0.0      name=textfile.name.split(".")
    21         1            1      1.0      0.0      name[-1]="mtf"
    22         1            1      1.0      0.0      name=".".join(name)
    23         1            4      4.0      0.0      print("Writing to: ",name)
    24         1           33     33.0      0.3      outfile=open(name,"wb")
    25         1            5      5.0      0.0      outfile.write(bytearray(MAGIC))
    26                                               
    27         1            1      1.0      0.0      output=[]
    28         1            1      1.0      0.0      pile=[]
    29         1            1      1.0      0.0      codeLength=1
    30        21           50      2.4      0.5      for line in textfile:
    31        20           15      0.8      0.1          if len(line)>1:
    32        20           28      1.4      0.3              line=line.split(" ")
    33        20           19      0.9      0.2              line[-1] = line[-1][:-1]
    34       220          178      0.8      1.8              for word in line:
    35       200          402      2.0      4.0                  if word not in pile:
    36                                                               #print("Adding %s to pile" % word)
    37       200          177      0.9      1.8                      pile.append(word)
    38       200         8516     42.6     84.9                      if len(pile)<=120:
    39       120          102      0.8      1.0                          output.append(chr(len(pile)+128))
    40        80          105      1.3      1.0                      elif len(pile)<=375:
    41        80          145      1.8      1.4                          output.append(chr(121+128) + chr(len(pile)-121))
    42                                                               elif len(pile)<=65912:
    43                                                                   output.append(chr(122+128) + chr((len(pile)-376)//256) + chr((len(pile)-376)%256))
    44                                                               else:
    45                                                                   print("Too many unique words in the file")
    46                                                                   raise Error
    47       200          195      1.0      1.9                      output.append(word)
    48                                                           else:
    49                                                               index=pile.index(word)
    50                                                               pile.append(pile.pop(index))
    51                                                               if len(pile)-index<=120:
    52                                                                   output.append(chr(len(pile)-index+128))
    53                                                               elif len(pile)-index<=375:
    54                                                                   output.append(chr(121+128) + chr(len(pile)-index-121))
    55                                                               else:
    56                                                                   output.append(chr(122+128) + chr((len(pile)-376-index)//256) + chr((len(pile)-376-index)%256))
    57        20           16      0.8      0.2          output.append("\n")
    58         1            7      7.0      0.1      output="".join(output)
    59         1            3      3.0      0.0      outfile.write(bytes(output,'latin-1'))
    60                                               
    61         1            4      4.0      0.0      compressed_size=len(bytearray(MAGIC)) + len(bytes(output,'latin-1'))
    62         1            4      4.0      0.0      print("Size of original file: ", original_size)
    63         1            2      2.0      0.0      print("Size of compressed file: ", compressed_size)
    64         1            6      6.0      0.1      print("Filesize has been reduced by %.2f%%" % ((original_size-compressed_size)/original_size*100))


Outputting to:  ./enctests/test12.txt
Wrote profile results to mtfdecode.py.lprof
Timer unit: 1e-06 s

Total time: 0.023405 s
File: mtfcoding3.py
Function: decode_main at line 83

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile
    84                                           def decode_main(mtffile):
    85         1           25     25.0      0.1      magic=mtffile.read(4)
    86         1          152    152.0      0.6      if(not re.match('úÎúß',magic) and not re.match('úÎúÞ',magic)):
    87                                                   raise Error
    88                                               
    89         1            1      1.0      0.0      output=[]
    90         1            0      0.0      0.0      pile=[]
    91         1            1      1.0      0.0      while True:
    92       201          874      4.3      3.7          ch=mtffile.read(1)
    93       201          205      1.0      0.9          if ch=='': break
    94       200          131      0.7      0.6          if ch=='\n':    output.append('\n')
    95       200          130      0.7      0.6          elif ord(ch)>0x80:
    96       200          124      0.6      0.5              if ord(ch)<=0xf8:
    97       120           75      0.6      0.3                  code=ord(ch)-0x80
    98       120           76      0.6      0.3                  if code>len(pile):
    99       120         9858     82.2     42.1                      word=get_word(mtffile)
   100       120           81      0.7      0.3                      pile.append(word)
   101                                                           else:
   102                                                               word=pile.pop(len(pile)-code)
   103                                                               pile.append(word)
   104        80           56      0.7      0.2              elif ord(ch)==0xf9:
   105        80           69      0.9      0.3                  ch=mtffile.read(1)
   106        80           50      0.6      0.2                  code=ord(ch)+121
   107        80           60      0.8      0.3                  if code>len(pile):
   108        80         1382     17.3      5.9                      word=get_word(mtffile)
   109        80           58      0.7      0.2                      pile.append(word)
   110                                                           else:
   111                                                               word=pile.pop(len(pile)-code)
   112                                                               pile.append(word)
   113                                                       elif ord(ch)==0xfa:
   114                                                           ch=mtffile.read(1)
   115                                                           ch2=mtffile.read(1)
   116                                                           code=ord(ch)*256+ord(ch2)+376
   117                                                           if code>len(pile):
   118                                                               word=get_word(mtffile)
   119                                                               pile.append(word)
   120                                                           else:
   121                                                               word=pile.pop(len(pile)-code)
   122                                                               pile.append(word)
   123                                                       else:
   124                                                           raise Error
   125       200          798      4.0      3.4              if mtffile.read(1)=='\n':                     
   126        20           15      0.8      0.1                  output.append(word + "\n")
   127                                                       else:
   128       180          156      0.9      0.7                  output.append(word + " ")
   129       180         8902     49.5     38.0                  mtffile.seek(mtffile.tell()-1)                
   130         1            3      3.0      0.0      name=mtffile.name.split(".")
   131         1            1      1.0      0.0      name[-1]="txt"
   132         1            1      1.0      0.0      name=".".join(name)
   133         1            6      6.0      0.0      output="".join(output)
   134         1            4      4.0      0.0      print("Outputting to: ",name)
   135         1           33     33.0      0.1      with open(name,'wb') as f:
   136         1           78     78.0      0.3          f.write(bytes(output,'latin-1'))

------------------------------


TEST 13
------------------------------
Writing to:  ./enctests/test13.mtf
Size of original file:  1600
Size of compressed file:  2309
Filesize has been reduced by -44.31%
Wrote profile results to mtfencode.py.lprof
Timer unit: 1e-06 s

Total time: 0.013576 s
File: mtfcoding2.py
Function: encode_main at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def encode_main(textfile):
    18         1            7      7.0      0.1      original_size=os.fstat(textfile.fileno()).st_size
    19                                               
    20         1            2      2.0      0.0      name=textfile.name.split(".")
    21         1            1      1.0      0.0      name[-1]="mtf"
    22         1            2      2.0      0.0      name=".".join(name)
    23         1            4      4.0      0.0      print("Writing to: ",name)
    24         1           32     32.0      0.2      outfile=open(name,"wb")
    25         1            5      5.0      0.0      outfile.write(bytearray(MAGIC))
    26                                               
    27         1            1      1.0      0.0      output=[]
    28         1            1      1.0      0.0      pile=[]
    29         1            0      0.0      0.0      codeLength=1
    30       401          350      0.9      2.6      for line in textfile:
    31       400         8681     21.7     63.9          if len(line)>1:
    32       400          353      0.9      2.6              line=line.split(" ")
    33       400          369      0.9      2.7              line[-1] = line[-1][:-1]
    34       800          620      0.8      4.6              for word in line:
    35       400         1221      3.1      9.0                  if word not in pile:
    36                                                               #print("Adding %s to pile" % word)
    37       400          317      0.8      2.3                      pile.append(word)
    38       400          310      0.8      2.3                      if len(pile)<=120:
    39       120          110      0.9      0.8                          output.append(chr(len(pile)+128))
    40       280          226      0.8      1.7                      elif len(pile)<=375:
    41       255          278      1.1      2.0                          output.append(chr(121+128) + chr(len(pile)-121))
    42        25           15      0.6      0.1                      elif len(pile)<=65912:
    43        25           29      1.2      0.2                          output.append(chr(122+128) + chr((len(pile)-376)//256) + chr((len(pile)-376)%256))
    44                                                               else:
    45                                                                   print("Too many unique words in the file")
    46                                                                   raise Error
    47       400          328      0.8      2.4                      output.append(word)
    48                                                           else:
    49                                                               index=pile.index(word)
    50                                                               pile.append(pile.pop(index))
    51                                                               if len(pile)-index<=120:
    52                                                                   output.append(chr(len(pile)-index+128))
    53                                                               elif len(pile)-index<=375:
    54                                                                   output.append(chr(121+128) + chr(len(pile)-index-121))
    55                                                               else:
    56                                                                   output.append(chr(122+128) + chr((len(pile)-376-index)//256) + chr((len(pile)-376-index)%256))
    57       400          281      0.7      2.1          output.append("\n")
    58         1           13     13.0      0.1      output="".join(output)
    59         1            4      4.0      0.0      outfile.write(bytes(output,'latin-1'))
    60                                               
    61         1            4      4.0      0.0      compressed_size=len(bytearray(MAGIC)) + len(bytes(output,'latin-1'))
    62         1            4      4.0      0.0      print("Size of original file: ", original_size)
    63         1            2      2.0      0.0      print("Size of compressed file: ", compressed_size)
    64         1            6      6.0      0.0      print("Filesize has been reduced by %.2f%%" % ((original_size-compressed_size)/original_size*100))


Outputting to:  ./enctests/test13.txt
Wrote profile results to mtfdecode.py.lprof
Timer unit: 1e-06 s

Total time: 0.026176 s
File: mtfcoding3.py
Function: decode_main at line 83

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile
    84                                           def decode_main(mtffile):
    85         1           26     26.0      0.1      magic=mtffile.read(4)
    86         1         4172   4172.0     15.9      if(not re.match('úÎúß',magic) and not re.match('úÎúÞ',magic)):
    87                                                   raise Error
    88                                               
    89         1            1      1.0      0.0      output=[]
    90         1            1      1.0      0.0      pile=[]
    91         1            0      0.0      0.0      while True:
    92       401          301      0.8      1.1          ch=mtffile.read(1)
    93       401          320      0.8      1.2          if ch=='': break
    94       400          360      0.9      1.4          if ch=='\n':    output.append('\n')
    95       400          274      0.7      1.0          elif ord(ch)>0x80:
    96       400          383      1.0      1.5              if ord(ch)<=0xf8:
    97       120           95      0.8      0.4                  code=ord(ch)-0x80
    98       120           91      0.8      0.3                  if code>len(pile):
    99       120         6356     53.0     24.3                      word=get_word(mtffile)
   100       120          115      1.0      0.4                      pile.append(word)
   101                                                           else:
   102                                                               word=pile.pop(len(pile)-code)
   103                                                               pile.append(word)
   104       280          198      0.7      0.8              elif ord(ch)==0xf9:
   105       255          210      0.8      0.8                  ch=mtffile.read(1)
   106       255          198      0.8      0.8                  code=ord(ch)+121
   107       255          170      0.7      0.6                  if code>len(pile):
   108       255         5761     22.6     22.0                      word=get_word(mtffile)
   109       255          209      0.8      0.8                      pile.append(word)
   110                                                           else:
   111                                                               word=pile.pop(len(pile)-code)
   112                                                               pile.append(word)
   113        25           15      0.6      0.1              elif ord(ch)==0xfa:
   114        25           21      0.8      0.1                  ch=mtffile.read(1)
   115        25           15      0.6      0.1                  ch2=mtffile.read(1)
   116        25           22      0.9      0.1                  code=ord(ch)*256+ord(ch2)+376
   117        25           14      0.6      0.1                  if code>len(pile):
   118        25          516     20.6      2.0                      word=get_word(mtffile)
   119        25           19      0.8      0.1                      pile.append(word)
   120                                                           else:
   121                                                               word=pile.pop(len(pile)-code)
   122                                                               pile.append(word)
   123                                                       else:
   124                                                           raise Error
   125       400         5736     14.3     21.9              if mtffile.read(1)=='\n':                     
   126       400          351      0.9      1.3                  output.append(word + "\n")
   127                                                       else:
   128                                                           output.append(word + " ")
   129                                                           mtffile.seek(mtffile.tell()-1)                
   130         1            3      3.0      0.0      name=mtffile.name.split(".")
   131         1            1      1.0      0.0      name[-1]="txt"
   132         1            2      2.0      0.0      name=".".join(name)
   133         1            8      8.0      0.0      output="".join(output)
   134         1            4      4.0      0.0      print("Outputting to: ",name)
   135         1           46     46.0      0.2      with open(name,'wb') as f:
   136         1          162    162.0      0.6          f.write(bytes(output,'latin-1'))

------------------------------


TEST 14
------------------------------
Writing to:  ./enctests/test14.mtf
Size of original file:  1600
Size of compressed file:  1952
Filesize has been reduced by -22.00%
Wrote profile results to mtfencode.py.lprof
Timer unit: 1e-06 s

Total time: 0.008192 s
File: mtfcoding2.py
Function: encode_main at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def encode_main(textfile):
    18         1           25     25.0      0.3      original_size=os.fstat(textfile.fileno()).st_size
    19                                               
    20         1           17     17.0      0.2      name=textfile.name.split(".")
    21         1           13     13.0      0.2      name[-1]="mtf"
    22         1           12     12.0      0.1      name=".".join(name)
    23         1           12     12.0      0.1      print("Writing to: ",name)
    24         1           43     43.0      0.5      outfile=open(name,"wb")
    25         1           12     12.0      0.1      outfile.write(bytearray(MAGIC))
    26                                               
    27         1            6      6.0      0.1      output=[]
    28         1            5      5.0      0.1      pile=[]
    29         1            5      5.0      0.1      codeLength=1
    30        44           89      2.0      1.1      for line in textfile:
    31        43           38      0.9      0.5          if len(line)>1:
    32        43           62      1.4      0.8              line=line.split(" ")
    33        43           44      1.0      0.5              line[-1] = line[-1][:-1]
    34       443         4291      9.7     52.4              for word in line:
    35       400         1194      3.0     14.6                  if word not in pile:
    36                                                               #print("Adding %s to pile" % word)
    37       400          324      0.8      4.0                      pile.append(word)
    38       400          989      2.5     12.1                      if len(pile)<=120:
    39       120          116      1.0      1.4                          output.append(chr(len(pile)+128))
    40       280          217      0.8      2.6                      elif len(pile)<=375:
    41       255          261      1.0      3.2                          output.append(chr(121+128) + chr(len(pile)-121))
    42        25           20      0.8      0.2                      elif len(pile)<=65912:
    43        25           39      1.6      0.5                          output.append(chr(122+128) + chr((len(pile)-376)//256) + chr((len(pile)-376)%256))
    44                                                               else:
    45                                                                   print("Too many unique words in the file")
    46                                                                   raise Error
    47       400          298      0.7      3.6                      output.append(word)
    48                                                           else:
    49                                                               index=pile.index(word)
    50                                                               pile.append(pile.pop(index))
    51                                                               if len(pile)-index<=120:
    52                                                                   output.append(chr(len(pile)-index+128))
    53                                                               elif len(pile)-index<=375:
    54                                                                   output.append(chr(121+128) + chr(len(pile)-index-121))
    55                                                               else:
    56                                                                   output.append(chr(122+128) + chr((len(pile)-376-index)//256) + chr((len(pile)-376-index)%256))
    57        43           29      0.7      0.4          output.append("\n")
    58         1           11     11.0      0.1      output="".join(output)
    59         1            4      4.0      0.0      outfile.write(bytes(output,'latin-1'))
    60                                               
    61         1            4      4.0      0.0      compressed_size=len(bytearray(MAGIC)) + len(bytes(output,'latin-1'))
    62         1            4      4.0      0.0      print("Size of original file: ", original_size)
    63         1            2      2.0      0.0      print("Size of compressed file: ", compressed_size)
    64         1            6      6.0      0.1      print("Filesize has been reduced by %.2f%%" % ((original_size-compressed_size)/original_size*100))


Outputting to:  ./enctests/test14.txt
Wrote profile results to mtfdecode.py.lprof
Timer unit: 1e-06 s

Total time: 0.025667 s
File: mtfcoding3.py
Function: decode_main at line 83

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile
    84                                           def decode_main(mtffile):
    85         1           27     27.0      0.1      magic=mtffile.read(4)
    86         1          156    156.0      0.6      if(not re.match('úÎúß',magic) and not re.match('úÎúÞ',magic)):
    87                                                   raise Error
    88                                               
    89         1            1      1.0      0.0      output=[]
    90         1            0      0.0      0.0      pile=[]
    91         1            1      1.0      0.0      while True:
    92       401         5899     14.7     23.0          ch=mtffile.read(1)
    93       401          334      0.8      1.3          if ch=='': break
    94       400          271      0.7      1.1          if ch=='\n':    output.append('\n')
    95       400          287      0.7      1.1          elif ord(ch)>0x80:
    96       400          268      0.7      1.0              if ord(ch)<=0xf8:
    97       120           76      0.6      0.3                  code=ord(ch)-0x80
    98       120           81      0.7      0.3                  if code>len(pile):
    99       120         6593     54.9     25.7                      word=get_word(mtffile)
   100       120          102      0.8      0.4                      pile.append(word)
   101                                                           else:
   102                                                               word=pile.pop(len(pile)-code)
   103                                                               pile.append(word)
   104       280          187      0.7      0.7              elif ord(ch)==0xf9:
   105       255          202      0.8      0.8                  ch=mtffile.read(1)
   106       255          192      0.8      0.7                  code=ord(ch)+121
   107       255          170      0.7      0.7                  if code>len(pile):
   108       255         4371     17.1     17.0                      word=get_word(mtffile)
   109       255          186      0.7      0.7                      pile.append(word)
   110                                                           else:
   111                                                               word=pile.pop(len(pile)-code)
   112                                                               pile.append(word)
   113        25           18      0.7      0.1              elif ord(ch)==0xfa:
   114        25           24      1.0      0.1                  ch=mtffile.read(1)
   115        25           20      0.8      0.1                  ch2=mtffile.read(1)
   116        25           14      0.6      0.1                  code=ord(ch)*256+ord(ch2)+376
   117        25          100      4.0      0.4                  if code>len(pile):
   118        25          464     18.6      1.8                      word=get_word(mtffile)
   119        25           15      0.6      0.1                      pile.append(word)
   120                                                           else:
   121                                                               word=pile.pop(len(pile)-code)
   122                                                               pile.append(word)
   123                                                       else:
   124                                                           raise Error
   125       400         2302      5.8      9.0              if mtffile.read(1)=='\n':                     
   126        43           39      0.9      0.2                  output.append(word + "\n")
   127                                                       else:
   128       357          380      1.1      1.5                  output.append(word + " ")
   129       357         2690      7.5     10.5                  mtffile.seek(mtffile.tell()-1)                
   130         1           14     14.0      0.1      name=mtffile.name.split(".")
   131         1            1      1.0      0.0      name[-1]="txt"
   132         1            1      1.0      0.0      name=".".join(name)
   133         1           19     19.0      0.1      output="".join(output)
   134         1            4      4.0      0.0      print("Outputting to: ",name)
   135         1           58     58.0      0.2      with open(name,'wb') as f:
   136         1          100    100.0      0.4          f.write(bytes(output,'latin-1'))

------------------------------


TEST 15
------------------------------
Writing to:  ./enctests/test15.mtf
Size of original file:  149995
Size of compressed file:  239501
Filesize has been reduced by -59.67%
Wrote profile results to mtfencode.py.lprof
Timer unit: 1e-06 s

Total time: 11.4808 s
File: mtfcoding2.py
Function: encode_main at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def encode_main(textfile):
    18         1            7      7.0      0.0      original_size=os.fstat(textfile.fileno()).st_size
    19                                               
    20         1            3      3.0      0.0      name=textfile.name.split(".")
    21         1            1      1.0      0.0      name[-1]="mtf"
    22         1            1      1.0      0.0      name=".".join(name)
    23         1            3      3.0      0.0      print("Writing to: ",name)
    24         1           57     57.0      0.0      outfile=open(name,"wb")
    25         1            6      6.0      0.0      outfile.write(bytearray(MAGIC))
    26                                               
    27         1            0      0.0      0.0      output=[]
    28         1            1      1.0      0.0      pile=[]
    29         1            1      1.0      0.0      codeLength=1
    30     30000        76491      2.5      0.7      for line in textfile:
    31     29999        52344      1.7      0.5          if len(line)>1:
    32     29999        82116      2.7      0.7              line=line.split(" ")
    33     29999        70209      2.3      0.6              line[-1] = line[-1][:-1]
    34     59998        94529      1.6      0.8              for word in line:
    35     29999     10637054    354.6     92.7                  if word not in pile:
    36                                                               #print("Adding %s to pile" % word)
    37     29999        73031      2.4      0.6                      pile.append(word)
    38     29999        57211      1.9      0.5                      if len(pile)<=120:
    39       120          105      0.9      0.0                          output.append(chr(len(pile)+128))
    40     29879        74606      2.5      0.6                      elif len(pile)<=375:
    41       255          259      1.0      0.0                          output.append(chr(121+128) + chr(len(pile)-121))
    42     29624        45346      1.5      0.4                      elif len(pile)<=65912:
    43     29624       104151      3.5      0.9                          output.append(chr(122+128) + chr((len(pile)-376)//256) + chr((len(pile)-376)%256))
    44                                                               else:
    45                                                                   print("Too many unique words in the file")
    46                                                                   raise Error
    47     29999        58599      2.0      0.5                      output.append(word)
    48                                                           else:
    49                                                               index=pile.index(word)
    50                                                               pile.append(pile.pop(index))
    51                                                               if len(pile)-index<=120:
    52                                                                   output.append(chr(len(pile)-index+128))
    53                                                               elif len(pile)-index<=375:
    54                                                                   output.append(chr(121+128) + chr(len(pile)-index-121))
    55                                                               else:
    56                                                                   output.append(chr(122+128) + chr((len(pile)-376-index)//256) + chr((len(pile)-376-index)%256))
    57     29999        49150      1.6      0.4          output.append("\n")
    58         1         1408   1408.0      0.0      output="".join(output)
    59         1         3910   3910.0      0.0      outfile.write(bytes(output,'latin-1'))
    60                                               
    61         1          141    141.0      0.0      compressed_size=len(bytearray(MAGIC)) + len(bytes(output,'latin-1'))
    62         1           10     10.0      0.0      print("Size of original file: ", original_size)
    63         1            2      2.0      0.0      print("Size of compressed file: ", compressed_size)
    64         1           10     10.0      0.0      print("Filesize has been reduced by %.2f%%" % ((original_size-compressed_size)/original_size*100))


Outputting to:  ./enctests/test15.txt
Wrote profile results to mtfdecode.py.lprof
Timer unit: 1e-06 s

Total time: 2.41267 s
File: mtfcoding3.py
Function: decode_main at line 83

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile
    84                                           def decode_main(mtffile):
    85         1           31     31.0      0.0      magic=mtffile.read(4)
    86         1          163    163.0      0.0      if(not re.match('úÎúß',magic) and not re.match('úÎúÞ',magic)):
    87                                                   raise Error
    88                                               
    89         1            1      1.0      0.0      output=[]
    90         1            1      1.0      0.0      pile=[]
    91         1            0      0.0      0.0      while True:
    92     30000        32886      1.1      1.4          ch=mtffile.read(1)
    93     30000        29129      1.0      1.2          if ch=='': break
    94     29999        33494      1.1      1.4          if ch=='\n':    output.append('\n')
    95     29999        31508      1.1      1.3          elif ord(ch)>0x80:
    96     29999        60423      2.0      2.5              if ord(ch)<=0xf8:
    97       120           96      0.8      0.0                  code=ord(ch)-0x80
    98       120           81      0.7      0.0                  if code>len(pile):
    99       120         2963     24.7      0.1                      word=get_word(mtffile)
   100       120           99      0.8      0.0                      pile.append(word)
   101                                                           else:
   102                                                               word=pile.pop(len(pile)-code)
   103                                                               pile.append(word)
   104     29879        36031      1.2      1.5              elif ord(ch)==0xf9:
   105       255          270      1.1      0.0                  ch=mtffile.read(1)
   106       255          222      0.9      0.0                  code=ord(ch)+121
   107       255          204      0.8      0.0                  if code>len(pile):
   108       255         6573     25.8      0.3                      word=get_word(mtffile)
   109       255          236      0.9      0.0                      pile.append(word)
   110                                                           else:
   111                                                               word=pile.pop(len(pile)-code)
   112                                                               pile.append(word)
   113     29624        38876      1.3      1.6              elif ord(ch)==0xfa:
   114     29624        62370      2.1      2.6                  ch=mtffile.read(1)
   115     29624        52229      1.8      2.2                  ch2=mtffile.read(1)
   116     29624        45359      1.5      1.9                  code=ord(ch)*256+ord(ch2)+376
   117     29624        51577      1.7      2.1                  if code>len(pile):
   118     29624      1455228     49.1     60.3                      word=get_word(mtffile)
   119     29624        67571      2.3      2.8                      pile.append(word)
   120                                                           else:
   121                                                               word=pile.pop(len(pile)-code)
   122                                                               pile.append(word)
   123                                                       else:
   124                                                           raise Error
   125     29999       327351     10.9     13.6              if mtffile.read(1)=='\n':                     
   126     29999        75395      2.5      3.1                  output.append(word + "\n")
   127                                                       else:
   128                                                           output.append(word + " ")
   129                                                           mtffile.seek(mtffile.tell()-1)                
   130         1            5      5.0      0.0      name=mtffile.name.split(".")
   131         1            1      1.0      0.0      name[-1]="txt"
   132         1            1      1.0      0.0      name=".".join(name)
   133         1         1951   1951.0      0.1      output="".join(output)
   134         1           12     12.0      0.0      print("Outputting to: ",name)
   135         1           93     93.0      0.0      with open(name,'wb') as f:
   136         1          238    238.0      0.0          f.write(bytes(output,'latin-1'))

------------------------------


TEST 16
------------------------------
Writing to:  ./enctests/test16.mtf
Size of original file:  6911
Size of compressed file:  3180
Filesize has been reduced by 53.99%
Wrote profile results to mtfencode.py.lprof
Timer unit: 1e-06 s

Total time: 0.033349 s
File: mtfcoding2.py
Function: encode_main at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def encode_main(textfile):
    18         1           16     16.0      0.0      original_size=os.fstat(textfile.fileno()).st_size
    19                                               
    20         1            9      9.0      0.0      name=textfile.name.split(".")
    21         1            7      7.0      0.0      name[-1]="mtf"
    22         1            6      6.0      0.0      name=".".join(name)
    23         1            9      9.0      0.0      print("Writing to: ",name)
    24         1           42     42.0      0.1      outfile=open(name,"wb")
    25         1           10     10.0      0.0      outfile.write(bytearray(MAGIC))
    26                                               
    27         1            3      3.0      0.0      output=[]
    28         1            3      3.0      0.0      pile=[]
    29         1            4      4.0      0.0      codeLength=1
    30       343          376      1.1      1.1      for line in textfile:
    31       342          277      0.8      0.8          if len(line)>1:
    32       304          351      1.2      1.1              line=line.split(" ")
    33       304          280      0.9      0.8              line[-1] = line[-1][:-1]
    34      1924         6301      3.3     18.9              for word in line:
    35      1620         3501      2.2     10.5                  if word not in pile:
    36                                                               #print("Adding %s to pile" % word)
    37       251          273      1.1      0.8                      pile.append(word)
    38       251          181      0.7      0.5                      if len(pile)<=120:
    39       120          107      0.9      0.3                          output.append(chr(len(pile)+128))
    40       131          112      0.9      0.3                      elif len(pile)<=375:
    41       131          137      1.0      0.4                          output.append(chr(121+128) + chr(len(pile)-121))
    42                                                               elif len(pile)<=65912:
    43                                                                   output.append(chr(122+128) + chr((len(pile)-376)//256) + chr((len(pile)-376)%256))
    44                                                               else:
    45                                                                   print("Too many unique words in the file")
    46                                                                   raise Error
    47       251          181      0.7      0.5                      output.append(word)
    48                                                           else:
    49      1369        12027      8.8     36.1                      index=pile.index(word)
    50      1369         2143      1.6      6.4                      pile.append(pile.pop(index))
    51      1369         1102      0.8      3.3                      if len(pile)-index<=120:
    52      1250         5320      4.3     16.0                          output.append(chr(len(pile)-index+128))
    53       119           97      0.8      0.3                      elif len(pile)-index<=375:
    54       119          128      1.1      0.4                          output.append(chr(121+128) + chr(len(pile)-index-121))
    55                                                               else:
    56                                                                   output.append(chr(122+128) + chr((len(pile)-376-index)//256) + chr((len(pile)-376-index)%256))
    57       342          299      0.9      0.9          output.append("\n")
    58         1           26     26.0      0.1      output="".join(output)
    59         1            5      5.0      0.0      outfile.write(bytes(output,'latin-1'))
    60                                               
    61         1            5      5.0      0.0      compressed_size=len(bytearray(MAGIC)) + len(bytes(output,'latin-1'))
    62         1            4      4.0      0.0      print("Size of original file: ", original_size)
    63         1            2      2.0      0.0      print("Size of compressed file: ", compressed_size)
    64         1            5      5.0      0.0      print("Filesize has been reduced by %.2f%%" % ((original_size-compressed_size)/original_size*100))


Outputting to:  ./enctests/test16.txt
Wrote profile results to mtfdecode.py.lprof
Timer unit: 1e-06 s

Total time: 0.07707 s
File: mtfcoding3.py
Function: decode_main at line 83

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile
    84                                           def decode_main(mtffile):
    85         1           28     28.0      0.0      magic=mtffile.read(4)
    86         1          150    150.0      0.2      if(not re.match('úÎúß',magic) and not re.match('úÎúÞ',magic)):
    87                                                   raise Error
    88                                               
    89         1            1      1.0      0.0      output=[]
    90         1            1      1.0      0.0      pile=[]
    91         1            1      1.0      0.0      while True:
    92      1659        10030      6.0     13.0          ch=mtffile.read(1)
    93      1659         1115      0.7      1.4          if ch=='': break
    94      1658         1122      0.7      1.5          if ch=='\n':    output.append('\n')
    95      1620         5805      3.6      7.5          elif ord(ch)>0x80:
    96      1620         1053      0.7      1.4              if ord(ch)<=0xf8:
    97      1370         1046      0.8      1.4                  code=ord(ch)-0x80
    98      1370          962      0.7      1.2                  if code>len(pile):
    99       120         2260     18.8      2.9                      word=get_word(mtffile)
   100       120          100      0.8      0.1                      pile.append(word)
   101                                                           else:
   102      1250         1265      1.0      1.6                      word=pile.pop(len(pile)-code)
   103      1250          898      0.7      1.2                      pile.append(word)
   104       250          180      0.7      0.2              elif ord(ch)==0xf9:
   105       250          202      0.8      0.3                  ch=mtffile.read(1)
   106       250          192      0.8      0.2                  code=ord(ch)+121
   107       250          155      0.6      0.2                  if code>len(pile):
   108       131        10293     78.6     13.4                      word=get_word(mtffile)
   109       131          111      0.8      0.1                      pile.append(word)
   110                                                           else:
   111       119          812      6.8      1.1                      word=pile.pop(len(pile)-code)
   112       119           72      0.6      0.1                      pile.append(word)
   113                                                       elif ord(ch)==0xfa:
   114                                                           ch=mtffile.read(1)
   115                                                           ch2=mtffile.read(1)
   116                                                           code=ord(ch)*256+ord(ch2)+376
   117                                                           if code>len(pile):
   118                                                               word=get_word(mtffile)
   119                                                               pile.append(word)
   120                                                           else:
   121                                                               word=pile.pop(len(pile)-code)
   122                                                               pile.append(word)
   123                                                       else:
   124                                                           raise Error
   125      1620        10630      6.6     13.8              if mtffile.read(1)=='\n':                     
   126       304         1035      3.4      1.3                  output.append(word + "\n")
   127                                                       else:
   128      1316         1250      0.9      1.6                  output.append(word + " ")
   129      1316        26113     19.8     33.9                  mtffile.seek(mtffile.tell()-1)                
   130         1            4      4.0      0.0      name=mtffile.name.split(".")
   131         1            1      1.0      0.0      name[-1]="txt"
   132         1            1      1.0      0.0      name=".".join(name)
   133         1           41     41.0      0.1      output="".join(output)
   134         1            5      5.0      0.0      print("Outputting to: ",name)
   135         1           47     47.0      0.1      with open(name,'wb') as f:
   136         1           89     89.0      0.1          f.write(bytes(output,'latin-1'))

------------------------------


TEST 17
------------------------------
Writing to:  ./enctests/test17.mtf
Size of original file:  4212
Size of compressed file:  3921
Filesize has been reduced by 6.91%
Wrote profile results to mtfencode.py.lprof
Timer unit: 1e-06 s

Total time: 0.012985 s
File: mtfcoding2.py
Function: encode_main at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def encode_main(textfile):
    18         1          546    546.0      4.2      original_size=os.fstat(textfile.fileno()).st_size
    19                                               
    20         1           12     12.0      0.1      name=textfile.name.split(".")
    21         1            1      1.0      0.0      name[-1]="mtf"
    22         1            1      1.0      0.0      name=".".join(name)
    23         1            4      4.0      0.0      print("Writing to: ",name)
    24         1           35     35.0      0.3      outfile=open(name,"wb")
    25         1            6      6.0      0.0      outfile.write(bytearray(MAGIC))
    26                                               
    27         1            0      0.0      0.0      output=[]
    28         1            1      1.0      0.0      pile=[]
    29         1            1      1.0      0.0      codeLength=1
    30        73          116      1.6      0.9      for line in textfile:
    31        72           52      0.7      0.4          if len(line)>1:
    32        61           90      1.5      0.7              line=line.split(" ")
    33        61           68      1.1      0.5              line[-1] = line[-1][:-1]
    34       651          427      0.7      3.3              for word in line:
    35       590         5193      8.8     40.0                  if word not in pile:
    36                                                               #print("Adding %s to pile" % word)
    37       415          315      0.8      2.4                      pile.append(word)
    38       415          308      0.7      2.4                      if len(pile)<=120:
    39       120          129      1.1      1.0                          output.append(chr(len(pile)+128))
    40       295          213      0.7      1.6                      elif len(pile)<=375:
    41       255          271      1.1      2.1                          output.append(chr(121+128) + chr(len(pile)-121))
    42        40           35      0.9      0.3                      elif len(pile)<=65912:
    43        40           50      1.2      0.4                          output.append(chr(122+128) + chr((len(pile)-376)//256) + chr((len(pile)-376)%256))
    44                                                               else:
    45                                                                   print("Too many unique words in the file")
    46                                                                   raise Error
    47       415         3992      9.6     30.7                      output.append(word)
    48                                                           else:
    49       175          431      2.5      3.3                      index=pile.index(word)
    50       175          192      1.1      1.5                      pile.append(pile.pop(index))
    51       175          137      0.8      1.1                      if len(pile)-index<=120:
    52       136          133      1.0      1.0                          output.append(chr(len(pile)-index+128))
    53        39           74      1.9      0.6                      elif len(pile)-index<=375:
    54        39           42      1.1      0.3                          output.append(chr(121+128) + chr(len(pile)-index-121))
    55                                                               else:
    56                                                                   output.append(chr(122+128) + chr((len(pile)-376-index)//256) + chr((len(pile)-376-index)%256))
    57        72           67      0.9      0.5          output.append("\n")
    58         1           18     18.0      0.1      output="".join(output)
    59         1            6      6.0      0.0      outfile.write(bytes(output,'latin-1'))
    60                                               
    61         1            6      6.0      0.0      compressed_size=len(bytearray(MAGIC)) + len(bytes(output,'latin-1'))
    62         1            4      4.0      0.0      print("Size of original file: ", original_size)
    63         1            2      2.0      0.0      print("Size of compressed file: ", compressed_size)
    64         1            7      7.0      0.1      print("Filesize has been reduced by %.2f%%" % ((original_size-compressed_size)/original_size*100))


Outputting to:  ./enctests/test17.txt
Wrote profile results to mtfdecode.py.lprof
Timer unit: 1e-06 s

Total time: 0.057105 s
File: mtfcoding3.py
Function: decode_main at line 83

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile
    84                                           def decode_main(mtffile):
    85         1           32     32.0      0.1      magic=mtffile.read(4)
    86         1          171    171.0      0.3      if(not re.match('úÎúß',magic) and not re.match('úÎúÞ',magic)):
    87                                                   raise Error
    88                                               
    89         1            0      0.0      0.0      output=[]
    90         1            1      1.0      0.0      pile=[]
    91         1            0      0.0      0.0      while True:
    92       602         2567      4.3      4.5          ch=mtffile.read(1)
    93       602          423      0.7      0.7          if ch=='': break
    94       601          393      0.7      0.7          if ch=='\n':    output.append('\n')
    95       590          392      0.7      0.7          elif ord(ch)>0x80:
    96       590          414      0.7      0.7              if ord(ch)<=0xf8:
    97       256          183      0.7      0.3                  code=ord(ch)-0x80
    98       256          157      0.6      0.3                  if code>len(pile):
    99       120         7510     62.6     13.2                      word=get_word(mtffile)
   100       120          108      0.9      0.2                      pile.append(word)
   101                                                           else:
   102       136          196      1.4      0.3                      word=pile.pop(len(pile)-code)
   103       136         4603     33.8      8.1                      pile.append(word)
   104       334          222      0.7      0.4              elif ord(ch)==0xf9:
   105       294          293      1.0      0.5                  ch=mtffile.read(1)
   106       294          201      0.7      0.4                  code=ord(ch)+121
   107       294         3840     13.1      6.7                  if code>len(pile):
   108       255        14348     56.3     25.1                      word=get_word(mtffile)
   109       255          192      0.8      0.3                      pile.append(word)
   110                                                           else:
   111        39           34      0.9      0.1                      word=pile.pop(len(pile)-code)
   112        39           25      0.6      0.0                      pile.append(word)
   113        40           27      0.7      0.0              elif ord(ch)==0xfa:
   114        40           30      0.8      0.1                  ch=mtffile.read(1)
   115        40           27      0.7      0.0                  ch2=mtffile.read(1)
   116        40           31      0.8      0.1                  code=ord(ch)*256+ord(ch2)+376
   117        40           24      0.6      0.0                  if code>len(pile):
   118        40          994     24.9      1.7                      word=get_word(mtffile)
   119        40           23      0.6      0.0                      pile.append(word)
   120                                                           else:
   121                                                               word=pile.pop(len(pile)-code)
   122                                                               pile.append(word)
   123                                                       else:
   124                                                           raise Error
   125       590         2222      3.8      3.9              if mtffile.read(1)=='\n':                     
   126        61           49      0.8      0.1                  output.append(word + "\n")
   127                                                       else:
   128       529          530      1.0      0.9                  output.append(word + " ")
   129       529        16598     31.4     29.1                  mtffile.seek(mtffile.tell()-1)                
   130         1            3      3.0      0.0      name=mtffile.name.split(".")
   131         1            1      1.0      0.0      name[-1]="txt"
   132         1            1      1.0      0.0      name=".".join(name)
   133         1           22     22.0      0.0      output="".join(output)
   134         1            5      5.0      0.0      print("Outputting to: ",name)
   135         1          129    129.0      0.2      with open(name,'wb') as f:
   136         1           84     84.0      0.1          f.write(bytes(output,'latin-1'))

------------------------------


TEST 18
------------------------------
Writing to:  ./enctests/test18.mtf
Size of original file:  57842
Size of compressed file:  47439
Filesize has been reduced by 17.99%
Wrote profile results to mtfencode.py.lprof
Timer unit: 1e-06 s

Total time: 0.574621 s
File: mtfcoding2.py
Function: encode_main at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def encode_main(textfile):
    18         1            9      9.0      0.0      original_size=os.fstat(textfile.fileno()).st_size
    19                                               
    20         1            2      2.0      0.0      name=textfile.name.split(".")
    21         1            2      2.0      0.0      name[-1]="mtf"
    22         1            2      2.0      0.0      name=".".join(name)
    23         1            4      4.0      0.0      print("Writing to: ",name)
    24         1           39     39.0      0.0      outfile=open(name,"wb")
    25         1            6      6.0      0.0      outfile.write(bytearray(MAGIC))
    26                                               
    27         1            1      1.0      0.0      output=[]
    28         1            1      1.0      0.0      pile=[]
    29         1            1      1.0      0.0      codeLength=1
    30       980         5799      5.9      1.0      for line in textfile:
    31       979          817      0.8      0.1          if len(line)>1:
    32       839         5846      7.0      1.0              line=line.split(" ")
    33       839         5325      6.3      0.9              line[-1] = line[-1][:-1]
    34      9011        14901      1.7      2.6              for word in line:
    35      8172       268649     32.9     46.8                  if word not in pile:
    36                                                               #print("Adding %s to pile" % word)
    37      3504         7238      2.1      1.3                      pile.append(word)
    38      3504         3037      0.9      0.5                      if len(pile)<=120:
    39       120          102      0.8      0.0                          output.append(chr(len(pile)+128))
    40      3384         7285      2.2      1.3                      elif len(pile)<=375:
    41       255          297      1.2      0.1                          output.append(chr(121+128) + chr(len(pile)-121))
    42      3129         2433      0.8      0.4                      elif len(pile)<=65912:
    43      3129         9018      2.9      1.6                          output.append(chr(122+128) + chr((len(pile)-376)//256) + chr((len(pile)-376)%256))
    44                                                               else:
    45                                                                   print("Too many unique words in the file")
    46                                                                   raise Error
    47      3504         2837      0.8      0.5                      output.append(word)
    48                                                           else:
    49      4668       171174     36.7     29.8                      index=pile.index(word)
    50      4668        28488      6.1      5.0                      pile.append(pile.pop(index))
    51      4668        15819      3.4      2.8                      if len(pile)-index<=120:
    52      1982         2065      1.0      0.4                          output.append(chr(len(pile)-index+128))
    53      2686         2276      0.8      0.4                      elif len(pile)-index<=375:
    54      1109         9223      8.3      1.6                          output.append(chr(121+128) + chr(len(pile)-index-121))
    55                                                               else:
    56      1577        10662      6.8      1.9                          output.append(chr(122+128) + chr((len(pile)-376-index)//256) + chr((len(pile)-376-index)%256))
    57       979          803      0.8      0.1          output.append("\n")
    58         1          346    346.0      0.1      output="".join(output)
    59         1           70     70.0      0.0      outfile.write(bytes(output,'latin-1'))
    60                                               
    61         1           29     29.0      0.0      compressed_size=len(bytearray(MAGIC)) + len(bytes(output,'latin-1'))
    62         1            6      6.0      0.0      print("Size of original file: ", original_size)
    63         1            2      2.0      0.0      print("Size of compressed file: ", compressed_size)
    64         1            7      7.0      0.0      print("Filesize has been reduced by %.2f%%" % ((original_size-compressed_size)/original_size*100))


Outputting to:  ./enctests/test18.txt
Wrote profile results to mtfdecode.py.lprof
Timer unit: 1e-06 s

Total time: 0.570268 s
File: mtfcoding3.py
Function: decode_main at line 83

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile
    84                                           def decode_main(mtffile):
    85         1           35     35.0      0.0      magic=mtffile.read(4)
    86         1          160    160.0      0.0      if(not re.match('úÎúß',magic) and not re.match('úÎúÞ',magic)):
    87                                                   raise Error
    88                                               
    89         1            1      1.0      0.0      output=[]
    90         1            0      0.0      0.0      pile=[]
    91         1            1      1.0      0.0      while True:
    92      8313        70446      8.5     12.4          ch=mtffile.read(1)
    93      8313        10150      1.2      1.8          if ch=='': break
    94      8312         5519      0.7      1.0          if ch=='\n':    output.append('\n')
    95      8172        19167      2.3      3.4          elif ord(ch)>0x80:
    96      8172        10722      1.3      1.9              if ord(ch)<=0xf8:
    97      2102         9110      4.3      1.6                  code=ord(ch)-0x80
    98      2102         1567      0.7      0.3                  if code>len(pile):
    99       120         6714     56.0      1.2                      word=get_word(mtffile)
   100       120           88      0.7      0.0                      pile.append(word)
   101                                                           else:
   102      1982         2081      1.0      0.4                      word=pile.pop(len(pile)-code)
   103      1982         1754      0.9      0.3                      pile.append(word)
   104      6070        14138      2.3      2.5              elif ord(ch)==0xf9:
   105      1364         4750      3.5      0.8                  ch=mtffile.read(1)
   106      1364          939      0.7      0.2                  code=ord(ch)+121
   107      1364         5122      3.8      0.9                  if code>len(pile):
   108       255        10982     43.1      1.9                      word=get_word(mtffile)
   109       255          214      0.8      0.0                      pile.append(word)
   110                                                           else:
   111      1109         1211      1.1      0.2                      word=pile.pop(len(pile)-code)
   112      1109        12584     11.3      2.2                      pile.append(word)
   113      4706         3224      0.7      0.6              elif ord(ch)==0xfa:
   114      4706         8392      1.8      1.5                  ch=mtffile.read(1)
   115      4706         3863      0.8      0.7                  ch2=mtffile.read(1)
   116      4706         4271      0.9      0.7                  code=ord(ch)*256+ord(ch2)+376
   117      4706         3474      0.7      0.6                  if code>len(pile):
   118      3129       140578     44.9     24.7                      word=get_word(mtffile)
   119      3129        10599      3.4      1.9                      pile.append(word)
   120                                                           else:
   121      1577         2077      1.3      0.4                      word=pile.pop(len(pile)-code)
   122      1577         1212      0.8      0.2                      pile.append(word)
   123                                                       else:
   124                                                           raise Error
   125      8172        48952      6.0      8.6              if mtffile.read(1)=='\n':                     
   126       839          872      1.0      0.2                  output.append(word + "\n")
   127                                                       else:
   128      7333        14325      2.0      2.5                  output.append(word + " ")
   129      7333       140481     19.2     24.6                  mtffile.seek(mtffile.tell()-1)                
   130         1            5      5.0      0.0      name=mtffile.name.split(".")
   131         1            1      1.0      0.0      name[-1]="txt"
   132         1            1      1.0      0.0      name=".".join(name)
   133         1          292    292.0      0.1      output="".join(output)
   134         1            5      5.0      0.0      print("Outputting to: ",name)
   135         1           57     57.0      0.0      with open(name,'wb') as f:
   136         1          132    132.0      0.0          f.write(bytes(output,'latin-1'))

------------------------------


TEST 19
------------------------------
Writing to:  ./enctests/test19.mtf
Size of original file:  95033
Size of compressed file:  70395
Filesize has been reduced by 25.93%
Wrote profile results to mtfencode.py.lprof
Timer unit: 1e-06 s

Total time: 2.06795 s
File: mtfcoding2.py
Function: encode_main at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                           @profile
    17                                           def encode_main(textfile):
    18         1            8      8.0      0.0      original_size=os.fstat(textfile.fileno()).st_size
    19                                               
    20         1            3      3.0      0.0      name=textfile.name.split(".")
    21         1            1      1.0      0.0      name[-1]="mtf"
    22         1            1      1.0      0.0      name=".".join(name)
    23         1            4      4.0      0.0      print("Writing to: ",name)
    24         1           42     42.0      0.0      outfile=open(name,"wb")
    25         1            6      6.0      0.0      outfile.write(bytearray(MAGIC))
    26                                               
    27         1            1      1.0      0.0      output=[]
    28         1            1      1.0      0.0      pile=[]
    29         1            0      0.0      0.0      codeLength=1
    30      2623        13552      5.2      0.7      for line in textfile:
    31      2622         2362      0.9      0.1          if len(line)>1:
    32      2311         7898      3.4      0.4              line=line.split(" ")
    33      2311         6825      3.0      0.3              line[-1] = line[-1][:-1]
    34     19986        25315      1.3      1.2              for word in line:
    35     17675      1028857     58.2     49.8                  if word not in pile:
    36                                                               #print("Adding %s to pile" % word)
    37      4905        16609      3.4      0.8                      pile.append(word)
    38      4905         8465      1.7      0.4                      if len(pile)<=120:
    39       120          113      0.9      0.0                          output.append(chr(len(pile)+128))
    40      4785        11475      2.4      0.6                      elif len(pile)<=375:
    41       255          357      1.4      0.0                          output.append(chr(121+128) + chr(len(pile)-121))
    42      4530         3818      0.8      0.2                      elif len(pile)<=65912:
    43      4530        27434      6.1      1.3                          output.append(chr(122+128) + chr((len(pile)-376)//256) + chr((len(pile)-376)%256))
    44                                                               else:
    45                                                                   print("Too many unique words in the file")
    46                                                                   raise Error
    47      4905         4104      0.8      0.2                      output.append(word)
    48                                                           else:
    49     12770       781685     61.2     37.8                      index=pile.index(word)
    50     12770        57677      4.5      2.8                      pile.append(pile.pop(index))
    51     12770        22875      1.8      1.1                      if len(pile)-index<=120:
    52      6197        11591      1.9      0.6                          output.append(chr(len(pile)-index+128))
    53      6573         5922      0.9      0.3                      elif len(pile)-index<=375:
    54      2644         8111      3.1      0.4                          output.append(chr(121+128) + chr(len(pile)-index-121))
    55                                                               else:
    56      3929        11489      2.9      0.6                          output.append(chr(122+128) + chr((len(pile)-376-index)//256) + chr((len(pile)-376-index)%256))
    57      2622         2096      0.8      0.1          output.append("\n")
    58         1         8356   8356.0      0.4      output="".join(output)
    59         1          826    826.0      0.0      outfile.write(bytes(output,'latin-1'))
    60                                               
    61         1           54     54.0      0.0      compressed_size=len(bytearray(MAGIC)) + len(bytes(output,'latin-1'))
    62         1            8      8.0      0.0      print("Size of original file: ", original_size)
    63         1            2      2.0      0.0      print("Size of compressed file: ", compressed_size)
    64         1            9      9.0      0.0      print("Filesize has been reduced by %.2f%%" % ((original_size-compressed_size)/original_size*100))


Outputting to:  ./enctests/test19.txt
Wrote profile results to mtfdecode.py.lprof
Timer unit: 1e-06 s

Total time: 1.17043 s
File: mtfcoding3.py
Function: decode_main at line 83

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    83                                           @profile
    84                                           def decode_main(mtffile):
    85         1           30     30.0      0.0      magic=mtffile.read(4)
    86         1          152    152.0      0.0      if(not re.match('úÎúß',magic) and not re.match('úÎúÞ',magic)):
    87                                                   raise Error
    88                                               
    89         1            1      1.0      0.0      output=[]
    90         1            0      0.0      0.0      pile=[]
    91         1            1      1.0      0.0      while True:
    92     17987       201228     11.2     17.2          ch=mtffile.read(1)
    93     17987        30755      1.7      2.6          if ch=='': break
    94     17986        21863      1.2      1.9          if ch=='\n':    output.append('\n')
    95     17675        31241      1.8      2.7          elif ord(ch)>0x80:
    96     17675        30503      1.7      2.6              if ord(ch)<=0xf8:
    97      6317        12830      2.0      1.1                  code=ord(ch)-0x80
    98      6317         9267      1.5      0.8                  if code>len(pile):
    99       120         6171     51.4      0.5                      word=get_word(mtffile)
   100       120         3891     32.4      0.3                      pile.append(word)
   101                                                           else:
   102      6197        10374      1.7      0.9                      word=pile.pop(len(pile)-code)
   103      6197         8686      1.4      0.7                      pile.append(word)
   104     11358        13369      1.2      1.1              elif ord(ch)==0xf9:
   105      2899         6474      2.2      0.6                  ch=mtffile.read(1)
   106      2899         7062      2.4      0.6                  code=ord(ch)+121
   107      2899        13963      4.8      1.2                  if code>len(pile):
   108       255        11467     45.0      1.0                      word=get_word(mtffile)
   109       255          203      0.8      0.0                      pile.append(word)
   110                                                           else:
   111      2644         2926      1.1      0.2                      word=pile.pop(len(pile)-code)
   112      2644         6172      2.3      0.5                      pile.append(word)
   113      8459        14430      1.7      1.2              elif ord(ch)==0xfa:
   114      8459        20697      2.4      1.8                  ch=mtffile.read(1)
   115      8459        11197      1.3      1.0                  ch2=mtffile.read(1)
   116      8459        15837      1.9      1.4                  code=ord(ch)*256+ord(ch2)+376
   117      8459        10924      1.3      0.9                  if code>len(pile):
   118      4530       277541     61.3     23.7                      word=get_word(mtffile)
   119      4530         3891      0.9      0.3                      pile.append(word)
   120                                                           else:
   121      3929        10696      2.7      0.9                      word=pile.pop(len(pile)-code)
   122      3929         2943      0.7      0.3                      pile.append(word)
   123                                                       else:
   124                                                           raise Error
   125     17675        74510      4.2      6.4              if mtffile.read(1)=='\n':                     
   126      2311         2349      1.0      0.2                  output.append(word + "\n")
   127                                                       else:
   128     15364        21795      1.4      1.9                  output.append(word + " ")
   129     15364       274128     17.8     23.4                  mtffile.seek(mtffile.tell()-1)                
   130         1           16     16.0      0.0      name=mtffile.name.split(".")
   131         1            1      1.0      0.0      name[-1]="txt"
   132         1            1      1.0      0.0      name=".".join(name)
   133         1          608    608.0      0.1      output="".join(output)
   134         1            6      6.0      0.0      print("Outputting to: ",name)
   135         1           60     60.0      0.0      with open(name,'wb') as f:
   136         1          173    173.0      0.0          f.write(bytes(output,'latin-1'))

------------------------------

